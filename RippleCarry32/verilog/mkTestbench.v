//
// Generated by Bluespec Compiler, version 2024.01-13-ga8fe68a6 (build a8fe68a6)
//
// On Tue Jun 11 10:58:50 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTestbench(CLK,
		   RST_N);
  input  CLK;
  input  RST_N;

  // register a
  reg [31 : 0] a;
  wire [31 : 0] a_D_IN;
  wire a_EN;

  // register adder_1_available
  reg adder_1_available;
  wire adder_1_available_D_IN, adder_1_available_EN;

  // register adder_1_cin
  reg adder_1_cin;
  wire adder_1_cin_D_IN, adder_1_cin_EN;

  // register adder_1_in1
  reg [31 : 0] adder_1_in1;
  wire [31 : 0] adder_1_in1_D_IN;
  wire adder_1_in1_EN;

  // register adder_1_in2
  reg [31 : 0] adder_1_in2;
  wire [31 : 0] adder_1_in2_D_IN;
  wire adder_1_in2_EN;

  // register adder_1_result
  reg [32 : 0] adder_1_result;
  wire [32 : 0] adder_1_result_D_IN;
  wire adder_1_result_EN;

  // register b
  reg [31 : 0] b;
  wire [31 : 0] b_D_IN;
  wire b_EN;

  // register cin
  reg cin;
  wire cin_D_IN, cin_EN;

  // register count
  reg [7 : 0] count;
  wire [7 : 0] count_D_IN;
  wire count_EN;

  // register cout
  reg cout;
  wire cout_D_IN, cout_EN;

  // register overflow_flag
  reg overflow_flag;
  wire overflow_flag_D_IN, overflow_flag_EN;

  // register rng_a_r
  reg [31 : 0] rng_a_r;
  wire [31 : 0] rng_a_r_D_IN;
  wire rng_a_r_EN;

  // register rng_b_r
  reg [31 : 0] rng_b_r;
  wire [31 : 0] rng_b_r_D_IN;
  wire rng_b_r_EN;

  // register rng_cin_r
  reg [7 : 0] rng_cin_r;
  wire [7 : 0] rng_cin_r_D_IN;
  wire rng_cin_r_EN;

  // register state
  reg [1 : 0] state;
  reg [1 : 0] state_D_IN;
  wire state_EN;

  // register sum
  reg [31 : 0] sum;
  wire [31 : 0] sum_D_IN;
  wire sum_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_adder_1_call_compute,
       CAN_FIRE_RL_display_results,
       CAN_FIRE_RL_generate_random_inputs,
       CAN_FIRE_RL_get_results,
       CAN_FIRE_RL_initialize,
       WILL_FIRE_RL_adder_1_call_compute,
       WILL_FIRE_RL_display_results,
       WILL_FIRE_RL_generate_random_inputs,
       WILL_FIRE_RL_get_results,
       WILL_FIRE_RL_initialize;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_rng_a_r_write_1__VAL_1, MUX_rng_b_r_write_1__VAL_1;
  wire [7 : 0] MUX_rng_cin_r_write_1__VAL_1;
  wire MUX_state_write_1__SEL_1;

  // remaining internal signals
  wire [32 : 0] calculated_sum__h8602,
		expected_sum__h8601,
		x__h8619,
		x__h8621,
		x__h8833,
		x__h8835,
		y__h8620,
		y__h8622,
		y__h8836;
  wire [31 : 0] IF_temp1238_XOR_adder_1_cin_THEN_1_ELSE_0__q1,
		_theResult___snd__h466,
		x__h8779,
		y__h8780;
  wire [29 : 0] adder_1_in1_BIT_29_1_XOR_adder_1_in2_BIT_29_2__ETC___d246;
  wire [27 : 0] adder_1_in1_BIT_27_7_XOR_adder_1_in2_BIT_27_8__ETC___d245;
  wire [25 : 0] adder_1_in1_BIT_25_3_XOR_adder_1_in2_BIT_25_4__ETC___d244;
  wire [23 : 0] adder_1_in1_BIT_23_9_XOR_adder_1_in2_BIT_23_0__ETC___d243;
  wire [21 : 0] adder_1_in1_BIT_21_5_XOR_adder_1_in2_BIT_21_6__ETC___d242;
  wire [19 : 0] adder_1_in1_BIT_19_1_XOR_adder_1_in2_BIT_19_2__ETC___d241;
  wire [17 : 0] adder_1_in1_BIT_17_7_XOR_adder_1_in2_BIT_17_8__ETC___d240;
  wire [15 : 0] adder_1_in1_BIT_15_3_XOR_adder_1_in2_BIT_15_4__ETC___d239;
  wire [13 : 0] adder_1_in1_BIT_13_9_XOR_adder_1_in2_BIT_13_0__ETC___d238;
  wire [11 : 0] adder_1_in1_BIT_11_5_XOR_adder_1_in2_BIT_11_6__ETC___d237;
  wire [9 : 0] adder_1_in1_BIT_9_1_XOR_adder_1_in2_BIT_9_2_29_ETC___d236;
  wire [7 : 0] adder_1_in1_BIT_7_7_XOR_adder_1_in2_BIT_7_8_23_ETC___d235;
  wire [5 : 0] adder_1_in1_BIT_5_3_XOR_adder_1_in2_BIT_5_4_17_ETC___d234;
  wire [3 : 0] adder_1_in1_BIT_3_9_XOR_adder_1_in2_BIT_3_0_11_ETC___d233;
  wire [1 : 0] adder_1_in1_BIT_1_5_XOR_adder_1_in2_BIT_1_6_05_ETC___d232;
  wire _0_CONCAT_a_12_13_PLUS_0_CONCAT_b_14_15_16_PLUS_ETC___d323,
       cin__h1371,
       cin__h1504,
       cin__h1637,
       cin__h1770,
       cin__h1903,
       cin__h2036,
       cin__h2169,
       cin__h2302,
       cin__h2435,
       cin__h2568,
       cin__h2701,
       cin__h2834,
       cin__h2967,
       cin__h3100,
       cin__h3233,
       cin__h3366,
       cin__h3499,
       cin__h3632,
       cin__h3765,
       cin__h3898,
       cin__h4031,
       cin__h4164,
       cin__h4297,
       cin__h4430,
       cin__h4563,
       cin__h4696,
       cin__h4829,
       cin__h4962,
       cin__h5095,
       cin__h5228,
       cin__h5361,
       count_98_ULT_30___d311,
       temp1__h1238,
       temp1__h1372,
       temp1__h1505,
       temp1__h1638,
       temp1__h1771,
       temp1__h1904,
       temp1__h2037,
       temp1__h2170,
       temp1__h2303,
       temp1__h2436,
       temp1__h2569,
       temp1__h2702,
       temp1__h2835,
       temp1__h2968,
       temp1__h3101,
       temp1__h3234,
       temp1__h3367,
       temp1__h3500,
       temp1__h3633,
       temp1__h3766,
       temp1__h3899,
       temp1__h4032,
       temp1__h4165,
       temp1__h4298,
       temp1__h4431,
       temp1__h4564,
       temp1__h4697,
       temp1__h4830,
       temp1__h4963,
       temp1__h5096,
       temp1__h5229,
       temp1__h5362,
       x__h1252,
       x__h1386,
       x__h1519,
       x__h1652,
       x__h1785,
       x__h1918,
       x__h2051,
       x__h2184,
       x__h2317,
       x__h2450,
       x__h2583,
       x__h2716,
       x__h2849,
       x__h2982,
       x__h3115,
       x__h3248,
       x__h3381,
       x__h3514,
       x__h3647,
       x__h3780,
       x__h3913,
       x__h4046,
       x__h4179,
       x__h4312,
       x__h4445,
       x__h4578,
       x__h4711,
       x__h4844,
       x__h4977,
       x__h5110,
       x__h5243,
       x__h5376,
       x__h8434,
       x__h8436,
       y__h1253,
       y__h1387,
       y__h1520,
       y__h1653,
       y__h1786,
       y__h1919,
       y__h2052,
       y__h2185,
       y__h2318,
       y__h2451,
       y__h2584,
       y__h2717,
       y__h2850,
       y__h2983,
       y__h3116,
       y__h3249,
       y__h3382,
       y__h3515,
       y__h3648,
       y__h3781,
       y__h3914,
       y__h4047,
       y__h4180,
       y__h4313,
       y__h4446,
       y__h4579,
       y__h4712,
       y__h4845,
       y__h4978,
       y__h5111,
       y__h5244,
       y__h5377,
       y__h8435;

  // rule RL_initialize
  assign CAN_FIRE_RL_initialize = state == 2'd0 ;
  assign WILL_FIRE_RL_initialize = CAN_FIRE_RL_initialize ;

  // rule RL_get_results
  assign CAN_FIRE_RL_get_results = adder_1_available && state == 2'd2 ;
  assign WILL_FIRE_RL_get_results = CAN_FIRE_RL_get_results ;

  // rule RL_display_results
  assign CAN_FIRE_RL_display_results = state == 2'd3 ;
  assign WILL_FIRE_RL_display_results = CAN_FIRE_RL_display_results ;

  // rule RL_adder_1_call_compute
  assign CAN_FIRE_RL_adder_1_call_compute = !adder_1_available ;
  assign WILL_FIRE_RL_adder_1_call_compute =
	     CAN_FIRE_RL_adder_1_call_compute ;

  // rule RL_generate_random_inputs
  assign CAN_FIRE_RL_generate_random_inputs = state == 2'd1 ;
  assign WILL_FIRE_RL_generate_random_inputs =
	     CAN_FIRE_RL_generate_random_inputs ;

  // inputs to muxes for submodule ports
  assign MUX_state_write_1__SEL_1 =
	     WILL_FIRE_RL_display_results && count_98_ULT_30___d311 ;
  assign MUX_rng_a_r_write_1__VAL_1 =
	     rng_a_r[0] ?
	       { 1'd1,
		 rng_a_r[31:8],
		 ~rng_a_r[7],
		 rng_a_r[6],
		 ~rng_a_r[5],
		 rng_a_r[4],
		 ~rng_a_r[3:1] } :
	       { 1'd0, rng_a_r[31:1] } ;
  assign MUX_rng_b_r_write_1__VAL_1 =
	     rng_b_r[0] ?
	       { 1'd1,
		 rng_b_r[31:8],
		 ~rng_b_r[7],
		 rng_b_r[6],
		 ~rng_b_r[5],
		 rng_b_r[4],
		 ~rng_b_r[3:1] } :
	       { 1'd0, rng_b_r[31:1] } ;
  assign MUX_rng_cin_r_write_1__VAL_1 =
	     rng_cin_r[0] ?
	       { 1'd1, rng_cin_r[7:5], ~rng_cin_r[4:2], rng_cin_r[1] } :
	       { 1'd0, rng_cin_r[7:1] } ;

  // register a
  assign a_D_IN = rng_a_r ;
  assign a_EN = CAN_FIRE_RL_generate_random_inputs ;

  // register adder_1_available
  assign adder_1_available_D_IN = !WILL_FIRE_RL_generate_random_inputs ;
  assign adder_1_available_EN =
	     WILL_FIRE_RL_generate_random_inputs ||
	     WILL_FIRE_RL_adder_1_call_compute ;

  // register adder_1_cin
  assign adder_1_cin_D_IN = rng_cin_r[3] ;
  assign adder_1_cin_EN = CAN_FIRE_RL_generate_random_inputs ;

  // register adder_1_in1
  assign adder_1_in1_D_IN = rng_a_r ;
  assign adder_1_in1_EN = CAN_FIRE_RL_generate_random_inputs ;

  // register adder_1_in2
  assign adder_1_in2_D_IN = rng_b_r ;
  assign adder_1_in2_EN = CAN_FIRE_RL_generate_random_inputs ;

  // register adder_1_result
  assign adder_1_result_D_IN =
	     { x__h5376 | y__h5377, _theResult___snd__h466 } ;
  assign adder_1_result_EN = CAN_FIRE_RL_adder_1_call_compute ;

  // register b
  assign b_D_IN = rng_b_r ;
  assign b_EN = CAN_FIRE_RL_generate_random_inputs ;

  // register cin
  assign cin_D_IN = rng_cin_r[3] ;
  assign cin_EN = CAN_FIRE_RL_generate_random_inputs ;

  // register count
  assign count_D_IN = count + 8'd1 ;
  assign count_EN = CAN_FIRE_RL_generate_random_inputs ;

  // register cout
  assign cout_D_IN = adder_1_result[32] ;
  assign cout_EN = CAN_FIRE_RL_get_results ;

  // register overflow_flag
  assign overflow_flag_D_IN = x__h8434 & y__h8435 ;
  assign overflow_flag_EN = CAN_FIRE_RL_get_results ;

  // register rng_a_r
  assign rng_a_r_D_IN =
	     WILL_FIRE_RL_generate_random_inputs ?
	       MUX_rng_a_r_write_1__VAL_1 :
	       32'hAFD7CD41 ;
  assign rng_a_r_EN =
	     WILL_FIRE_RL_generate_random_inputs || WILL_FIRE_RL_initialize ;

  // register rng_b_r
  assign rng_b_r_D_IN =
	     WILL_FIRE_RL_generate_random_inputs ?
	       MUX_rng_b_r_write_1__VAL_1 :
	       32'hC9B12E0A ;
  assign rng_b_r_EN =
	     WILL_FIRE_RL_generate_random_inputs || WILL_FIRE_RL_initialize ;

  // register rng_cin_r
  assign rng_cin_r_D_IN =
	     WILL_FIRE_RL_generate_random_inputs ?
	       MUX_rng_cin_r_write_1__VAL_1 :
	       8'hA5 ;
  assign rng_cin_r_EN =
	     WILL_FIRE_RL_generate_random_inputs || WILL_FIRE_RL_initialize ;

  // register state
  always@(MUX_state_write_1__SEL_1 or
	  WILL_FIRE_RL_initialize or
	  WILL_FIRE_RL_generate_random_inputs or WILL_FIRE_RL_get_results)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_state_write_1__SEL_1 || WILL_FIRE_RL_initialize: state_D_IN = 2'd1;
      WILL_FIRE_RL_generate_random_inputs: state_D_IN = 2'd2;
      WILL_FIRE_RL_get_results: state_D_IN = 2'd3;
      default: state_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign state_EN =
	     WILL_FIRE_RL_display_results && count_98_ULT_30___d311 ||
	     WILL_FIRE_RL_initialize ||
	     WILL_FIRE_RL_generate_random_inputs ||
	     WILL_FIRE_RL_get_results ;

  // register sum
  assign sum_D_IN = adder_1_result[31:0] ;
  assign sum_EN = CAN_FIRE_RL_get_results ;

  // remaining internal signals
  assign IF_temp1238_XOR_adder_1_cin_THEN_1_ELSE_0__q1 =
	     (temp1__h1238 ^ adder_1_cin) ? 32'd1 : 32'd0 ;
  assign _0_CONCAT_a_12_13_PLUS_0_CONCAT_b_14_15_16_PLUS_ETC___d323 =
	     expected_sum__h8601 == calculated_sum__h8602 ;
  assign _theResult___snd__h466 =
	     { temp1__h5362 ^ cin__h5361,
	       temp1__h5229 ^ cin__h5228,
	       adder_1_in1_BIT_29_1_XOR_adder_1_in2_BIT_29_2__ETC___d246 } ;
  assign adder_1_in1_BIT_11_5_XOR_adder_1_in2_BIT_11_6__ETC___d237 =
	     { temp1__h2702 ^ cin__h2701,
	       temp1__h2569 ^ cin__h2568,
	       adder_1_in1_BIT_9_1_XOR_adder_1_in2_BIT_9_2_29_ETC___d236 } ;
  assign adder_1_in1_BIT_13_9_XOR_adder_1_in2_BIT_13_0__ETC___d238 =
	     { temp1__h2968 ^ cin__h2967,
	       temp1__h2835 ^ cin__h2834,
	       adder_1_in1_BIT_11_5_XOR_adder_1_in2_BIT_11_6__ETC___d237 } ;
  assign adder_1_in1_BIT_15_3_XOR_adder_1_in2_BIT_15_4__ETC___d239 =
	     { temp1__h3234 ^ cin__h3233,
	       temp1__h3101 ^ cin__h3100,
	       adder_1_in1_BIT_13_9_XOR_adder_1_in2_BIT_13_0__ETC___d238 } ;
  assign adder_1_in1_BIT_17_7_XOR_adder_1_in2_BIT_17_8__ETC___d240 =
	     { temp1__h3500 ^ cin__h3499,
	       temp1__h3367 ^ cin__h3366,
	       adder_1_in1_BIT_15_3_XOR_adder_1_in2_BIT_15_4__ETC___d239 } ;
  assign adder_1_in1_BIT_19_1_XOR_adder_1_in2_BIT_19_2__ETC___d241 =
	     { temp1__h3766 ^ cin__h3765,
	       temp1__h3633 ^ cin__h3632,
	       adder_1_in1_BIT_17_7_XOR_adder_1_in2_BIT_17_8__ETC___d240 } ;
  assign adder_1_in1_BIT_1_5_XOR_adder_1_in2_BIT_1_6_05_ETC___d232 =
	     { temp1__h1372 ^ cin__h1371,
	       IF_temp1238_XOR_adder_1_cin_THEN_1_ELSE_0__q1[0] } ;
  assign adder_1_in1_BIT_21_5_XOR_adder_1_in2_BIT_21_6__ETC___d242 =
	     { temp1__h4032 ^ cin__h4031,
	       temp1__h3899 ^ cin__h3898,
	       adder_1_in1_BIT_19_1_XOR_adder_1_in2_BIT_19_2__ETC___d241 } ;
  assign adder_1_in1_BIT_23_9_XOR_adder_1_in2_BIT_23_0__ETC___d243 =
	     { temp1__h4298 ^ cin__h4297,
	       temp1__h4165 ^ cin__h4164,
	       adder_1_in1_BIT_21_5_XOR_adder_1_in2_BIT_21_6__ETC___d242 } ;
  assign adder_1_in1_BIT_25_3_XOR_adder_1_in2_BIT_25_4__ETC___d244 =
	     { temp1__h4564 ^ cin__h4563,
	       temp1__h4431 ^ cin__h4430,
	       adder_1_in1_BIT_23_9_XOR_adder_1_in2_BIT_23_0__ETC___d243 } ;
  assign adder_1_in1_BIT_27_7_XOR_adder_1_in2_BIT_27_8__ETC___d245 =
	     { temp1__h4830 ^ cin__h4829,
	       temp1__h4697 ^ cin__h4696,
	       adder_1_in1_BIT_25_3_XOR_adder_1_in2_BIT_25_4__ETC___d244 } ;
  assign adder_1_in1_BIT_29_1_XOR_adder_1_in2_BIT_29_2__ETC___d246 =
	     { temp1__h5096 ^ cin__h5095,
	       temp1__h4963 ^ cin__h4962,
	       adder_1_in1_BIT_27_7_XOR_adder_1_in2_BIT_27_8__ETC___d245 } ;
  assign adder_1_in1_BIT_3_9_XOR_adder_1_in2_BIT_3_0_11_ETC___d233 =
	     { temp1__h1638 ^ cin__h1637,
	       temp1__h1505 ^ cin__h1504,
	       adder_1_in1_BIT_1_5_XOR_adder_1_in2_BIT_1_6_05_ETC___d232 } ;
  assign adder_1_in1_BIT_5_3_XOR_adder_1_in2_BIT_5_4_17_ETC___d234 =
	     { temp1__h1904 ^ cin__h1903,
	       temp1__h1771 ^ cin__h1770,
	       adder_1_in1_BIT_3_9_XOR_adder_1_in2_BIT_3_0_11_ETC___d233 } ;
  assign adder_1_in1_BIT_7_7_XOR_adder_1_in2_BIT_7_8_23_ETC___d235 =
	     { temp1__h2170 ^ cin__h2169,
	       temp1__h2037 ^ cin__h2036,
	       adder_1_in1_BIT_5_3_XOR_adder_1_in2_BIT_5_4_17_ETC___d234 } ;
  assign adder_1_in1_BIT_9_1_XOR_adder_1_in2_BIT_9_2_29_ETC___d236 =
	     { temp1__h2436 ^ cin__h2435,
	       temp1__h2303 ^ cin__h2302,
	       adder_1_in1_BIT_7_7_XOR_adder_1_in2_BIT_7_8_23_ETC___d235 } ;
  assign calculated_sum__h8602 = { cout, sum } ;
  assign cin__h1371 = x__h1252 | y__h1253 ;
  assign cin__h1504 = x__h1386 | y__h1387 ;
  assign cin__h1637 = x__h1519 | y__h1520 ;
  assign cin__h1770 = x__h1652 | y__h1653 ;
  assign cin__h1903 = x__h1785 | y__h1786 ;
  assign cin__h2036 = x__h1918 | y__h1919 ;
  assign cin__h2169 = x__h2051 | y__h2052 ;
  assign cin__h2302 = x__h2184 | y__h2185 ;
  assign cin__h2435 = x__h2317 | y__h2318 ;
  assign cin__h2568 = x__h2450 | y__h2451 ;
  assign cin__h2701 = x__h2583 | y__h2584 ;
  assign cin__h2834 = x__h2716 | y__h2717 ;
  assign cin__h2967 = x__h2849 | y__h2850 ;
  assign cin__h3100 = x__h2982 | y__h2983 ;
  assign cin__h3233 = x__h3115 | y__h3116 ;
  assign cin__h3366 = x__h3248 | y__h3249 ;
  assign cin__h3499 = x__h3381 | y__h3382 ;
  assign cin__h3632 = x__h3514 | y__h3515 ;
  assign cin__h3765 = x__h3647 | y__h3648 ;
  assign cin__h3898 = x__h3780 | y__h3781 ;
  assign cin__h4031 = x__h3913 | y__h3914 ;
  assign cin__h4164 = x__h4046 | y__h4047 ;
  assign cin__h4297 = x__h4179 | y__h4180 ;
  assign cin__h4430 = x__h4312 | y__h4313 ;
  assign cin__h4563 = x__h4445 | y__h4446 ;
  assign cin__h4696 = x__h4578 | y__h4579 ;
  assign cin__h4829 = x__h4711 | y__h4712 ;
  assign cin__h4962 = x__h4844 | y__h4845 ;
  assign cin__h5095 = x__h4977 | y__h4978 ;
  assign cin__h5228 = x__h5110 | y__h5111 ;
  assign cin__h5361 = x__h5243 | y__h5244 ;
  assign count_98_ULT_30___d311 = count < 8'd30 ;
  assign expected_sum__h8601 = x__h8619 + y__h8620 ;
  assign temp1__h1238 = adder_1_in1[0] ^ adder_1_in2[0] ;
  assign temp1__h1372 = adder_1_in1[1] ^ adder_1_in2[1] ;
  assign temp1__h1505 = adder_1_in1[2] ^ adder_1_in2[2] ;
  assign temp1__h1638 = adder_1_in1[3] ^ adder_1_in2[3] ;
  assign temp1__h1771 = adder_1_in1[4] ^ adder_1_in2[4] ;
  assign temp1__h1904 = adder_1_in1[5] ^ adder_1_in2[5] ;
  assign temp1__h2037 = adder_1_in1[6] ^ adder_1_in2[6] ;
  assign temp1__h2170 = adder_1_in1[7] ^ adder_1_in2[7] ;
  assign temp1__h2303 = adder_1_in1[8] ^ adder_1_in2[8] ;
  assign temp1__h2436 = adder_1_in1[9] ^ adder_1_in2[9] ;
  assign temp1__h2569 = adder_1_in1[10] ^ adder_1_in2[10] ;
  assign temp1__h2702 = adder_1_in1[11] ^ adder_1_in2[11] ;
  assign temp1__h2835 = adder_1_in1[12] ^ adder_1_in2[12] ;
  assign temp1__h2968 = adder_1_in1[13] ^ adder_1_in2[13] ;
  assign temp1__h3101 = adder_1_in1[14] ^ adder_1_in2[14] ;
  assign temp1__h3234 = adder_1_in1[15] ^ adder_1_in2[15] ;
  assign temp1__h3367 = adder_1_in1[16] ^ adder_1_in2[16] ;
  assign temp1__h3500 = adder_1_in1[17] ^ adder_1_in2[17] ;
  assign temp1__h3633 = adder_1_in1[18] ^ adder_1_in2[18] ;
  assign temp1__h3766 = adder_1_in1[19] ^ adder_1_in2[19] ;
  assign temp1__h3899 = adder_1_in1[20] ^ adder_1_in2[20] ;
  assign temp1__h4032 = adder_1_in1[21] ^ adder_1_in2[21] ;
  assign temp1__h4165 = adder_1_in1[22] ^ adder_1_in2[22] ;
  assign temp1__h4298 = adder_1_in1[23] ^ adder_1_in2[23] ;
  assign temp1__h4431 = adder_1_in1[24] ^ adder_1_in2[24] ;
  assign temp1__h4564 = adder_1_in1[25] ^ adder_1_in2[25] ;
  assign temp1__h4697 = adder_1_in1[26] ^ adder_1_in2[26] ;
  assign temp1__h4830 = adder_1_in1[27] ^ adder_1_in2[27] ;
  assign temp1__h4963 = adder_1_in1[28] ^ adder_1_in2[28] ;
  assign temp1__h5096 = adder_1_in1[29] ^ adder_1_in2[29] ;
  assign temp1__h5229 = adder_1_in1[30] ^ adder_1_in2[30] ;
  assign temp1__h5362 = adder_1_in1[31] ^ adder_1_in2[31] ;
  assign x__h1252 = adder_1_in1[0] & adder_1_in2[0] ;
  assign x__h1386 = adder_1_in1[1] & adder_1_in2[1] ;
  assign x__h1519 = adder_1_in1[2] & adder_1_in2[2] ;
  assign x__h1652 = adder_1_in1[3] & adder_1_in2[3] ;
  assign x__h1785 = adder_1_in1[4] & adder_1_in2[4] ;
  assign x__h1918 = adder_1_in1[5] & adder_1_in2[5] ;
  assign x__h2051 = adder_1_in1[6] & adder_1_in2[6] ;
  assign x__h2184 = adder_1_in1[7] & adder_1_in2[7] ;
  assign x__h2317 = adder_1_in1[8] & adder_1_in2[8] ;
  assign x__h2450 = adder_1_in1[9] & adder_1_in2[9] ;
  assign x__h2583 = adder_1_in1[10] & adder_1_in2[10] ;
  assign x__h2716 = adder_1_in1[11] & adder_1_in2[11] ;
  assign x__h2849 = adder_1_in1[12] & adder_1_in2[12] ;
  assign x__h2982 = adder_1_in1[13] & adder_1_in2[13] ;
  assign x__h3115 = adder_1_in1[14] & adder_1_in2[14] ;
  assign x__h3248 = adder_1_in1[15] & adder_1_in2[15] ;
  assign x__h3381 = adder_1_in1[16] & adder_1_in2[16] ;
  assign x__h3514 = adder_1_in1[17] & adder_1_in2[17] ;
  assign x__h3647 = adder_1_in1[18] & adder_1_in2[18] ;
  assign x__h3780 = adder_1_in1[19] & adder_1_in2[19] ;
  assign x__h3913 = adder_1_in1[20] & adder_1_in2[20] ;
  assign x__h4046 = adder_1_in1[21] & adder_1_in2[21] ;
  assign x__h4179 = adder_1_in1[22] & adder_1_in2[22] ;
  assign x__h4312 = adder_1_in1[23] & adder_1_in2[23] ;
  assign x__h4445 = adder_1_in1[24] & adder_1_in2[24] ;
  assign x__h4578 = adder_1_in1[25] & adder_1_in2[25] ;
  assign x__h4711 = adder_1_in1[26] & adder_1_in2[26] ;
  assign x__h4844 = adder_1_in1[27] & adder_1_in2[27] ;
  assign x__h4977 = adder_1_in1[28] & adder_1_in2[28] ;
  assign x__h5110 = adder_1_in1[29] & adder_1_in2[29] ;
  assign x__h5243 = adder_1_in1[30] & adder_1_in2[30] ;
  assign x__h5376 = adder_1_in1[31] & adder_1_in2[31] ;
  assign x__h8434 = x__h8436 ^ adder_1_in2[31] ;
  assign x__h8436 = ~adder_1_in1[31] ;
  assign x__h8619 = x__h8621 + y__h8622 ;
  assign x__h8621 = { 1'd0, a } ;
  assign x__h8779 = a + b ;
  assign x__h8833 = x__h8835 + y__h8836 ;
  assign x__h8835 = { a[31], a } ;
  assign y__h1253 = adder_1_cin & temp1__h1238 ;
  assign y__h1387 = cin__h1371 & temp1__h1372 ;
  assign y__h1520 = cin__h1504 & temp1__h1505 ;
  assign y__h1653 = cin__h1637 & temp1__h1638 ;
  assign y__h1786 = cin__h1770 & temp1__h1771 ;
  assign y__h1919 = cin__h1903 & temp1__h1904 ;
  assign y__h2052 = cin__h2036 & temp1__h2037 ;
  assign y__h2185 = cin__h2169 & temp1__h2170 ;
  assign y__h2318 = cin__h2302 & temp1__h2303 ;
  assign y__h2451 = cin__h2435 & temp1__h2436 ;
  assign y__h2584 = cin__h2568 & temp1__h2569 ;
  assign y__h2717 = cin__h2701 & temp1__h2702 ;
  assign y__h2850 = cin__h2834 & temp1__h2835 ;
  assign y__h2983 = cin__h2967 & temp1__h2968 ;
  assign y__h3116 = cin__h3100 & temp1__h3101 ;
  assign y__h3249 = cin__h3233 & temp1__h3234 ;
  assign y__h3382 = cin__h3366 & temp1__h3367 ;
  assign y__h3515 = cin__h3499 & temp1__h3500 ;
  assign y__h3648 = cin__h3632 & temp1__h3633 ;
  assign y__h3781 = cin__h3765 & temp1__h3766 ;
  assign y__h3914 = cin__h3898 & temp1__h3899 ;
  assign y__h4047 = cin__h4031 & temp1__h4032 ;
  assign y__h4180 = cin__h4164 & temp1__h4165 ;
  assign y__h4313 = cin__h4297 & temp1__h4298 ;
  assign y__h4446 = cin__h4430 & temp1__h4431 ;
  assign y__h4579 = cin__h4563 & temp1__h4564 ;
  assign y__h4712 = cin__h4696 & temp1__h4697 ;
  assign y__h4845 = cin__h4829 & temp1__h4830 ;
  assign y__h4978 = cin__h4962 & temp1__h4963 ;
  assign y__h5111 = cin__h5095 & temp1__h5096 ;
  assign y__h5244 = cin__h5228 & temp1__h5229 ;
  assign y__h5377 = cin__h5361 & temp1__h5362 ;
  assign y__h8435 = adder_1_in2[31] ^ adder_1_result[31] ;
  assign y__h8620 = { 32'b0, cin } ;
  assign y__h8622 = { 1'd0, b } ;
  assign y__h8780 = { 31'd0, cin } ;
  assign y__h8836 = { b[31], b } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        a <= `BSV_ASSIGNMENT_DELAY 32'h70000000;
	adder_1_available <= `BSV_ASSIGNMENT_DELAY 1'd1;
	adder_1_cin <= `BSV_ASSIGNMENT_DELAY 1'd0;
	adder_1_in1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	adder_1_in2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	adder_1_result <= `BSV_ASSIGNMENT_DELAY 33'd0;
	b <= `BSV_ASSIGNMENT_DELAY 32'h10000000;
	cin <= `BSV_ASSIGNMENT_DELAY 1'd1;
	count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	cout <= `BSV_ASSIGNMENT_DELAY 1'd0;
	overflow_flag <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rng_a_r <= `BSV_ASSIGNMENT_DELAY 32'd1;
	rng_b_r <= `BSV_ASSIGNMENT_DELAY 32'd1;
	rng_cin_r <= `BSV_ASSIGNMENT_DELAY 8'd1;
	state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	sum <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (a_EN) a <= `BSV_ASSIGNMENT_DELAY a_D_IN;
	if (adder_1_available_EN)
	  adder_1_available <= `BSV_ASSIGNMENT_DELAY adder_1_available_D_IN;
	if (adder_1_cin_EN)
	  adder_1_cin <= `BSV_ASSIGNMENT_DELAY adder_1_cin_D_IN;
	if (adder_1_in1_EN)
	  adder_1_in1 <= `BSV_ASSIGNMENT_DELAY adder_1_in1_D_IN;
	if (adder_1_in2_EN)
	  adder_1_in2 <= `BSV_ASSIGNMENT_DELAY adder_1_in2_D_IN;
	if (adder_1_result_EN)
	  adder_1_result <= `BSV_ASSIGNMENT_DELAY adder_1_result_D_IN;
	if (b_EN) b <= `BSV_ASSIGNMENT_DELAY b_D_IN;
	if (cin_EN) cin <= `BSV_ASSIGNMENT_DELAY cin_D_IN;
	if (count_EN) count <= `BSV_ASSIGNMENT_DELAY count_D_IN;
	if (cout_EN) cout <= `BSV_ASSIGNMENT_DELAY cout_D_IN;
	if (overflow_flag_EN)
	  overflow_flag <= `BSV_ASSIGNMENT_DELAY overflow_flag_D_IN;
	if (rng_a_r_EN) rng_a_r <= `BSV_ASSIGNMENT_DELAY rng_a_r_D_IN;
	if (rng_b_r_EN) rng_b_r <= `BSV_ASSIGNMENT_DELAY rng_b_r_D_IN;
	if (rng_cin_r_EN) rng_cin_r <= `BSV_ASSIGNMENT_DELAY rng_cin_r_D_IN;
	if (state_EN) state <= `BSV_ASSIGNMENT_DELAY state_D_IN;
	if (sum_EN) sum <= `BSV_ASSIGNMENT_DELAY sum_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    a = 32'hAAAAAAAA;
    adder_1_available = 1'h0;
    adder_1_cin = 1'h0;
    adder_1_in1 = 32'hAAAAAAAA;
    adder_1_in2 = 32'hAAAAAAAA;
    adder_1_result = 33'h0AAAAAAAA;
    b = 32'hAAAAAAAA;
    cin = 1'h0;
    count = 8'hAA;
    cout = 1'h0;
    overflow_flag = 1'h0;
    rng_a_r = 32'hAAAAAAAA;
    rng_b_r = 32'hAAAAAAAA;
    rng_cin_r = 8'hAA;
    state = 2'h2;
    sum = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_results && count_98_ULT_30___d311 &&
	  _0_CONCAT_a_12_13_PLUS_0_CONCAT_b_14_15_16_PLUS_ETC___d323)
	$display("Test Passed");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_results && count_98_ULT_30___d311 &&
	  !_0_CONCAT_a_12_13_PLUS_0_CONCAT_b_14_15_16_PLUS_ETC___d323)
	$display("Test Failed: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_results && count_98_ULT_30___d311 &&
	  !_0_CONCAT_a_12_13_PLUS_0_CONCAT_b_14_15_16_PLUS_ETC___d323)
	$display("  %32b\n+ %32b\n+\t\t\t\t %0b\n= \n  %32b", a, b, cin, sum);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_results && count_98_ULT_30___d311 &&
	  !_0_CONCAT_a_12_13_PLUS_0_CONCAT_b_14_15_16_PLUS_ETC___d323)
	$display("  %32b", x__h8779 + y__h8780);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_results && count_98_ULT_30___d311 &&
	  !_0_CONCAT_a_12_13_PLUS_0_CONCAT_b_14_15_16_PLUS_ETC___d323)
	$display(" %33b", x__h8833 + y__h8620);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_results && count_98_ULT_30___d311 &&
	  !_0_CONCAT_a_12_13_PLUS_0_CONCAT_b_14_15_16_PLUS_ETC___d323)
	$display("Cout = %0b", cout);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_results && count_98_ULT_30___d311 &&
	  !_0_CONCAT_a_12_13_PLUS_0_CONCAT_b_14_15_16_PLUS_ETC___d323)
	$display("Overflow Flag = %0h\n", overflow_flag);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_results && count_98_ULT_30___d311 &&
	  overflow_flag)
	$display("Overflow occured");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_results && !count_98_ULT_30___d311)
	$finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mkTestbench

