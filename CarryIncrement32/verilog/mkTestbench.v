//
// Generated by Bluespec Compiler, version 2024.01-13-ga8fe68a6 (build a8fe68a6)
//
// On Tue Jun 11 10:59:45 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTestbench(CLK,
		   RST_N);
  input  CLK;
  input  RST_N;

  // register a
  reg [31 : 0] a;
  wire [31 : 0] a_D_IN;
  wire a_EN;

  // register adder_1_available
  reg adder_1_available;
  wire adder_1_available_D_IN, adder_1_available_EN;

  // register adder_1_cin
  reg adder_1_cin;
  wire adder_1_cin_D_IN, adder_1_cin_EN;

  // register adder_1_in1
  reg [31 : 0] adder_1_in1;
  wire [31 : 0] adder_1_in1_D_IN;
  wire adder_1_in1_EN;

  // register adder_1_in2
  reg [31 : 0] adder_1_in2;
  wire [31 : 0] adder_1_in2_D_IN;
  wire adder_1_in2_EN;

  // register adder_1_result
  reg [32 : 0] adder_1_result;
  wire [32 : 0] adder_1_result_D_IN;
  wire adder_1_result_EN;

  // register b
  reg [31 : 0] b;
  wire [31 : 0] b_D_IN;
  wire b_EN;

  // register cin
  reg cin;
  wire cin_D_IN, cin_EN;

  // register count
  reg [7 : 0] count;
  wire [7 : 0] count_D_IN;
  wire count_EN;

  // register cout
  reg cout;
  wire cout_D_IN, cout_EN;

  // register overflow_flag
  reg overflow_flag;
  wire overflow_flag_D_IN, overflow_flag_EN;

  // register rng_a_r
  reg [31 : 0] rng_a_r;
  wire [31 : 0] rng_a_r_D_IN;
  wire rng_a_r_EN;

  // register rng_b_r
  reg [31 : 0] rng_b_r;
  wire [31 : 0] rng_b_r_D_IN;
  wire rng_b_r_EN;

  // register rng_cin_r
  reg [7 : 0] rng_cin_r;
  wire [7 : 0] rng_cin_r_D_IN;
  wire rng_cin_r_EN;

  // register state
  reg [1 : 0] state;
  reg [1 : 0] state_D_IN;
  wire state_EN;

  // register sum
  reg [31 : 0] sum;
  wire [31 : 0] sum_D_IN;
  wire sum_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_adder_1_call_compute,
       CAN_FIRE_RL_display_results,
       CAN_FIRE_RL_generate_random_inputs,
       CAN_FIRE_RL_get_results,
       CAN_FIRE_RL_initialize,
       WILL_FIRE_RL_adder_1_call_compute,
       WILL_FIRE_RL_display_results,
       WILL_FIRE_RL_generate_random_inputs,
       WILL_FIRE_RL_get_results,
       WILL_FIRE_RL_initialize;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_rng_a_r_write_1__VAL_1, MUX_rng_b_r_write_1__VAL_1;
  wire [7 : 0] MUX_rng_cin_r_write_1__VAL_1;
  wire MUX_state_write_1__SEL_1;

  // remaining internal signals
  wire [32 : 0] calculated_sum__h11573,
		expected_sum__h11572,
		x__h11750,
		x__h11752,
		y__h11591,
		y__h11753;
  wire [8 : 0] IF_adder_1_in1_BITS_15_TO_8_3_AND_adder_1_in2__ETC___d98,
	       IF_adder_1_in1_BITS_23_TO_16_9_AND_adder_1_in2_ETC___d54,
	       IF_adder_1_in1_BITS_31_TO_24_AND_adder_1_in2_B_ETC___d10;
  wire [7 : 0] IF_adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2__ETC__q3,
	       IF_adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_ETC__q2,
	       IF_adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_B_ETC__q1,
	       adder_1_in1_BITS_15_TO_8_3_AND_adder_1_in2_BIT_ETC___d96,
	       adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d128,
	       adder_1_in1_BITS_23_TO_16_9_AND_adder_1_in2_BI_ETC___d52,
	       adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d84,
	       adder_1_in1_BITS_31_TO_24_AND_adder_1_in2_BITS_ETC___d8,
	       adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d40,
	       adder_1_in1_BITS_7_TO_0_38_AND_adder_1_in2_BIT_ETC___d143,
	       p__h2447,
	       p__h5177,
	       p__h7907,
	       p__h859,
	       spliced_bits__h490,
	       spliced_bits__h519,
	       spliced_bits__h548,
	       spliced_bits__h577;
  wire [5 : 0] adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d253,
	       adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d239,
	       adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d225;
  wire [1 : 0] adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d251,
	       adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d237,
	       adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d223;
  wire _0_CONCAT_a_27_28_PLUS_0_CONCAT_b_29_30_31_PLUS_ETC___d338,
       adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d174,
       adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d175,
       adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d176,
       adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d177,
       adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d178,
       adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d179,
       adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d180,
       adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d187,
       adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d188,
       adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d189,
       adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d190,
       adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d191,
       adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d192,
       adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d193,
       adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d200,
       adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d201,
       adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d202,
       adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d203,
       adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d204,
       adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d205,
       adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d206,
       carry_in__h2023,
       carry_in__h4860,
       carry_in__h7590,
       count_11_ULT_30___d326,
       sub_result_cout__h2022,
       sub_result_cout__h4859,
       sub_result_cout__h7589,
       x__h1057,
       x__h11405,
       x__h11407,
       x__h1206,
       x__h1208,
       x__h1314,
       x__h1316,
       x__h1422,
       x__h1424,
       x__h1530,
       x__h1532,
       x__h1638,
       x__h1640,
       x__h1746,
       x__h1748,
       x__h1854,
       x__h1856,
       x__h2792,
       x__h2901,
       x__h2903,
       x__h3009,
       x__h3011,
       x__h3117,
       x__h3119,
       x__h3225,
       x__h3227,
       x__h3333,
       x__h3335,
       x__h3441,
       x__h3443,
       x__h5522,
       x__h5631,
       x__h5633,
       x__h5739,
       x__h5741,
       x__h5847,
       x__h5849,
       x__h5955,
       x__h5957,
       x__h6063,
       x__h6065,
       x__h6171,
       x__h6173,
       x__h8252,
       x__h8361,
       x__h8363,
       x__h8469,
       x__h8471,
       x__h8577,
       x__h8579,
       x__h8685,
       x__h8687,
       x__h8793,
       x__h8795,
       x__h8901,
       x__h8903,
       y__h11406;

  // rule RL_initialize
  assign CAN_FIRE_RL_initialize = state == 2'd0 ;
  assign WILL_FIRE_RL_initialize = CAN_FIRE_RL_initialize ;

  // rule RL_get_results
  assign CAN_FIRE_RL_get_results = adder_1_available && state == 2'd2 ;
  assign WILL_FIRE_RL_get_results = CAN_FIRE_RL_get_results ;

  // rule RL_display_results
  assign CAN_FIRE_RL_display_results = state == 2'd3 ;
  assign WILL_FIRE_RL_display_results = CAN_FIRE_RL_display_results ;

  // rule RL_adder_1_call_compute
  assign CAN_FIRE_RL_adder_1_call_compute = !adder_1_available ;
  assign WILL_FIRE_RL_adder_1_call_compute =
	     CAN_FIRE_RL_adder_1_call_compute ;

  // rule RL_generate_random_inputs
  assign CAN_FIRE_RL_generate_random_inputs = state == 2'd1 ;
  assign WILL_FIRE_RL_generate_random_inputs =
	     CAN_FIRE_RL_generate_random_inputs ;

  // inputs to muxes for submodule ports
  assign MUX_state_write_1__SEL_1 =
	     WILL_FIRE_RL_display_results && count_11_ULT_30___d326 ;
  assign MUX_rng_a_r_write_1__VAL_1 =
	     rng_a_r[0] ?
	       { 1'd1,
		 rng_a_r[31:8],
		 ~rng_a_r[7],
		 rng_a_r[6],
		 ~rng_a_r[5],
		 rng_a_r[4],
		 ~rng_a_r[3:1] } :
	       { 1'd0, rng_a_r[31:1] } ;
  assign MUX_rng_b_r_write_1__VAL_1 =
	     rng_b_r[0] ?
	       { 1'd1,
		 rng_b_r[31:8],
		 ~rng_b_r[7],
		 rng_b_r[6],
		 ~rng_b_r[5],
		 rng_b_r[4],
		 ~rng_b_r[3:1] } :
	       { 1'd0, rng_b_r[31:1] } ;
  assign MUX_rng_cin_r_write_1__VAL_1 =
	     rng_cin_r[0] ?
	       { 1'd1, rng_cin_r[7:5], ~rng_cin_r[4:2], rng_cin_r[1] } :
	       { 1'd0, rng_cin_r[7:1] } ;

  // register a
  assign a_D_IN = rng_a_r ;
  assign a_EN = CAN_FIRE_RL_generate_random_inputs ;

  // register adder_1_available
  assign adder_1_available_D_IN = !WILL_FIRE_RL_generate_random_inputs ;
  assign adder_1_available_EN =
	     WILL_FIRE_RL_generate_random_inputs ||
	     WILL_FIRE_RL_adder_1_call_compute ;

  // register adder_1_cin
  assign adder_1_cin_D_IN = rng_cin_r[3] ;
  assign adder_1_cin_EN = CAN_FIRE_RL_generate_random_inputs ;

  // register adder_1_in1
  assign adder_1_in1_D_IN = rng_a_r ;
  assign adder_1_in1_EN = CAN_FIRE_RL_generate_random_inputs ;

  // register adder_1_in2
  assign adder_1_in2_D_IN = rng_b_r ;
  assign adder_1_in2_EN = CAN_FIRE_RL_generate_random_inputs ;

  // register adder_1_result
  assign adder_1_result_D_IN =
	     { adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d40[7] &
	       adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d206 |
	       sub_result_cout__h7589,
	       spliced_bits__h490,
	       spliced_bits__h519,
	       spliced_bits__h548,
	       spliced_bits__h577 } ;
  assign adder_1_result_EN = CAN_FIRE_RL_adder_1_call_compute ;

  // register b
  assign b_D_IN = rng_b_r ;
  assign b_EN = CAN_FIRE_RL_generate_random_inputs ;

  // register cin
  assign cin_D_IN = rng_cin_r[3] ;
  assign cin_EN = CAN_FIRE_RL_generate_random_inputs ;

  // register count
  assign count_D_IN = count + 8'd1 ;
  assign count_EN = CAN_FIRE_RL_generate_random_inputs ;

  // register cout
  assign cout_D_IN = adder_1_result[32] ;
  assign cout_EN = CAN_FIRE_RL_get_results ;

  // register overflow_flag
  assign overflow_flag_D_IN = x__h11405 & y__h11406 ;
  assign overflow_flag_EN = CAN_FIRE_RL_get_results ;

  // register rng_a_r
  assign rng_a_r_D_IN =
	     WILL_FIRE_RL_generate_random_inputs ?
	       MUX_rng_a_r_write_1__VAL_1 :
	       32'hAFD7CD41 ;
  assign rng_a_r_EN =
	     WILL_FIRE_RL_generate_random_inputs || WILL_FIRE_RL_initialize ;

  // register rng_b_r
  assign rng_b_r_D_IN =
	     WILL_FIRE_RL_generate_random_inputs ?
	       MUX_rng_b_r_write_1__VAL_1 :
	       32'hC9B12E0A ;
  assign rng_b_r_EN =
	     WILL_FIRE_RL_generate_random_inputs || WILL_FIRE_RL_initialize ;

  // register rng_cin_r
  assign rng_cin_r_D_IN =
	     WILL_FIRE_RL_generate_random_inputs ?
	       MUX_rng_cin_r_write_1__VAL_1 :
	       8'hA5 ;
  assign rng_cin_r_EN =
	     WILL_FIRE_RL_generate_random_inputs || WILL_FIRE_RL_initialize ;

  // register state
  always@(MUX_state_write_1__SEL_1 or
	  WILL_FIRE_RL_initialize or
	  WILL_FIRE_RL_generate_random_inputs or WILL_FIRE_RL_get_results)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_state_write_1__SEL_1 || WILL_FIRE_RL_initialize: state_D_IN = 2'd1;
      WILL_FIRE_RL_generate_random_inputs: state_D_IN = 2'd2;
      WILL_FIRE_RL_get_results: state_D_IN = 2'd3;
      default: state_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign state_EN =
	     WILL_FIRE_RL_display_results && count_11_ULT_30___d326 ||
	     WILL_FIRE_RL_initialize ||
	     WILL_FIRE_RL_generate_random_inputs ||
	     WILL_FIRE_RL_get_results ;

  // register sum
  assign sum_D_IN = adder_1_result[31:0] ;
  assign sum_EN = CAN_FIRE_RL_get_results ;

  // remaining internal signals
  assign IF_adder_1_in1_BITS_15_TO_8_3_AND_adder_1_in2__ETC___d98 =
	     adder_1_in1_BITS_15_TO_8_3_AND_adder_1_in2_BIT_ETC___d96[0] ?
	       9'd2 :
	       9'd0 ;
  assign IF_adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2__ETC__q3 =
	     (adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d128[0] ^
	      carry_in__h2023) ?
	       8'd1 :
	       8'd0 ;
  assign IF_adder_1_in1_BITS_23_TO_16_9_AND_adder_1_in2_ETC___d54 =
	     adder_1_in1_BITS_23_TO_16_9_AND_adder_1_in2_BI_ETC___d52[0] ?
	       9'd2 :
	       9'd0 ;
  assign IF_adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_ETC__q2 =
	     (adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d84[0] ^
	      carry_in__h4860) ?
	       8'd1 :
	       8'd0 ;
  assign IF_adder_1_in1_BITS_31_TO_24_AND_adder_1_in2_B_ETC___d10 =
	     adder_1_in1_BITS_31_TO_24_AND_adder_1_in2_BITS_ETC___d8[0] ?
	       9'd2 :
	       9'd0 ;
  assign IF_adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_B_ETC__q1 =
	     (adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d40[0] ^
	      carry_in__h7590) ?
	       8'd1 :
	       8'd0 ;
  assign _0_CONCAT_a_27_28_PLUS_0_CONCAT_b_29_30_31_PLUS_ETC___d338 =
	     expected_sum__h11572 == calculated_sum__h11573 ;
  assign adder_1_in1_BITS_15_TO_8_3_AND_adder_1_in2_BIT_ETC___d96 =
	     adder_1_in1[15:8] & adder_1_in2[15:8] ;
  assign adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d128 =
	     p__h2447 ^
	     { x__h3443,
	       x__h3335,
	       x__h3227,
	       x__h3119,
	       x__h3011,
	       x__h2903,
	       IF_adder_1_in1_BITS_15_TO_8_3_AND_adder_1_in2__ETC___d98[1:0] } ;
  assign adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d174 =
	     adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d128[0] &
	     carry_in__h2023 ;
  assign adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d175 =
	     adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d128[1] &
	     adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d174 ;
  assign adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d176 =
	     adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d128[2] &
	     adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d175 ;
  assign adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d177 =
	     adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d128[3] &
	     adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d176 ;
  assign adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d178 =
	     adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d128[4] &
	     adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d177 ;
  assign adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d179 =
	     adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d128[5] &
	     adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d178 ;
  assign adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d180 =
	     adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d128[6] &
	     adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d179 ;
  assign adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d251 =
	     { adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d128[1] ^
	       adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d174,
	       IF_adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2__ETC__q3[0] } ;
  assign adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d253 =
	     { adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d128[5] ^
	       adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d178,
	       adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d128[4] ^
	       adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d177,
	       adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d128[3] ^
	       adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d176,
	       adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d128[2] ^
	       adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d175,
	       adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d251 } ;
  assign adder_1_in1_BITS_23_TO_16_9_AND_adder_1_in2_BI_ETC___d52 =
	     adder_1_in1[23:16] & adder_1_in2[23:16] ;
  assign adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d187 =
	     adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d84[0] &
	     carry_in__h4860 ;
  assign adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d188 =
	     adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d84[1] &
	     adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d187 ;
  assign adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d189 =
	     adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d84[2] &
	     adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d188 ;
  assign adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d190 =
	     adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d84[3] &
	     adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d189 ;
  assign adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d191 =
	     adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d84[4] &
	     adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d190 ;
  assign adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d192 =
	     adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d84[5] &
	     adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d191 ;
  assign adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d193 =
	     adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d84[6] &
	     adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d192 ;
  assign adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d237 =
	     { adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d84[1] ^
	       adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d187,
	       IF_adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_ETC__q2[0] } ;
  assign adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d239 =
	     { adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d84[5] ^
	       adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d191,
	       adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d84[4] ^
	       adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d190,
	       adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d84[3] ^
	       adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d189,
	       adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d84[2] ^
	       adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d188,
	       adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d237 } ;
  assign adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d84 =
	     p__h5177 ^
	     { x__h6173,
	       x__h6065,
	       x__h5957,
	       x__h5849,
	       x__h5741,
	       x__h5633,
	       IF_adder_1_in1_BITS_23_TO_16_9_AND_adder_1_in2_ETC___d54[1:0] } ;
  assign adder_1_in1_BITS_31_TO_24_AND_adder_1_in2_BITS_ETC___d8 =
	     adder_1_in1[31:24] & adder_1_in2[31:24] ;
  assign adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d200 =
	     adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d40[0] &
	     carry_in__h7590 ;
  assign adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d201 =
	     adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d40[1] &
	     adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d200 ;
  assign adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d202 =
	     adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d40[2] &
	     adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d201 ;
  assign adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d203 =
	     adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d40[3] &
	     adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d202 ;
  assign adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d204 =
	     adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d40[4] &
	     adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d203 ;
  assign adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d205 =
	     adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d40[5] &
	     adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d204 ;
  assign adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d206 =
	     adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d40[6] &
	     adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d205 ;
  assign adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d223 =
	     { adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d40[1] ^
	       adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d200,
	       IF_adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_B_ETC__q1[0] } ;
  assign adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d225 =
	     { adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d40[5] ^
	       adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d204,
	       adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d40[4] ^
	       adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d203,
	       adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d40[3] ^
	       adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d202,
	       adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d40[2] ^
	       adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d201,
	       adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d223 } ;
  assign adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d40 =
	     p__h7907 ^
	     { x__h8903,
	       x__h8795,
	       x__h8687,
	       x__h8579,
	       x__h8471,
	       x__h8363,
	       IF_adder_1_in1_BITS_31_TO_24_AND_adder_1_in2_B_ETC___d10[1:0] } ;
  assign adder_1_in1_BITS_7_TO_0_38_AND_adder_1_in2_BIT_ETC___d143 =
	     adder_1_in1[7:0] & adder_1_in2[7:0] ;
  assign calculated_sum__h11573 = { cout, sum } ;
  assign carry_in__h2023 =
	     x__h1854 |
	     adder_1_in1_BITS_7_TO_0_38_AND_adder_1_in2_BIT_ETC___d143[7] ;
  assign carry_in__h4860 =
	     adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d128[7] &
	     adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d180 |
	     sub_result_cout__h2022 ;
  assign carry_in__h7590 =
	     adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d84[7] &
	     adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d193 |
	     sub_result_cout__h4859 ;
  assign count_11_ULT_30___d326 = count < 8'd30 ;
  assign expected_sum__h11572 = x__h11750 + y__h11591 ;
  assign p__h2447 = adder_1_in1[15:8] ^ adder_1_in2[15:8] ;
  assign p__h5177 = adder_1_in1[23:16] ^ adder_1_in2[23:16] ;
  assign p__h7907 = adder_1_in1[31:24] ^ adder_1_in2[31:24] ;
  assign p__h859 = adder_1_in1[7:0] ^ adder_1_in2[7:0] ;
  assign spliced_bits__h490 =
	     { adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d40[7] ^
	       adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d206,
	       adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d40[6] ^
	       adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d205,
	       adder_1_in1_BITS_31_TO_24_XOR_adder_1_in2_BITS_ETC___d225 } ;
  assign spliced_bits__h519 =
	     { adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d84[7] ^
	       adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d193,
	       adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d84[6] ^
	       adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d192,
	       adder_1_in1_BITS_23_TO_16_9_XOR_adder_1_in2_BI_ETC___d239 } ;
  assign spliced_bits__h548 =
	     { adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d128[7] ^
	       adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d180,
	       adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d128[6] ^
	       adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d179,
	       adder_1_in1_BITS_15_TO_8_3_XOR_adder_1_in2_BIT_ETC___d253 } ;
  assign spliced_bits__h577 =
	     p__h859 ^
	     { x__h1856,
	       x__h1748,
	       x__h1640,
	       x__h1532,
	       x__h1424,
	       x__h1316,
	       x__h1208,
	       adder_1_cin } ;
  assign sub_result_cout__h2022 =
	     x__h3441 |
	     adder_1_in1_BITS_15_TO_8_3_AND_adder_1_in2_BIT_ETC___d96[7] ;
  assign sub_result_cout__h4859 =
	     x__h6171 |
	     adder_1_in1_BITS_23_TO_16_9_AND_adder_1_in2_BI_ETC___d52[7] ;
  assign sub_result_cout__h7589 =
	     x__h8901 |
	     adder_1_in1_BITS_31_TO_24_AND_adder_1_in2_BITS_ETC___d8[7] ;
  assign x__h1057 = adder_1_cin & p__h859[0] ;
  assign x__h11405 = x__h11407 ^ adder_1_in2[31] ;
  assign x__h11407 = ~adder_1_in1[31] ;
  assign x__h11750 = x__h11752 + y__h11753 ;
  assign x__h11752 = { 1'd0, a } ;
  assign x__h1206 = x__h1208 & p__h859[1] ;
  assign x__h1208 =
	     x__h1057 |
	     adder_1_in1_BITS_7_TO_0_38_AND_adder_1_in2_BIT_ETC___d143[0] ;
  assign x__h1314 = x__h1316 & p__h859[2] ;
  assign x__h1316 =
	     x__h1206 |
	     adder_1_in1_BITS_7_TO_0_38_AND_adder_1_in2_BIT_ETC___d143[1] ;
  assign x__h1422 = x__h1424 & p__h859[3] ;
  assign x__h1424 =
	     x__h1314 |
	     adder_1_in1_BITS_7_TO_0_38_AND_adder_1_in2_BIT_ETC___d143[2] ;
  assign x__h1530 = x__h1532 & p__h859[4] ;
  assign x__h1532 =
	     x__h1422 |
	     adder_1_in1_BITS_7_TO_0_38_AND_adder_1_in2_BIT_ETC___d143[3] ;
  assign x__h1638 = x__h1640 & p__h859[5] ;
  assign x__h1640 =
	     x__h1530 |
	     adder_1_in1_BITS_7_TO_0_38_AND_adder_1_in2_BIT_ETC___d143[4] ;
  assign x__h1746 = x__h1748 & p__h859[6] ;
  assign x__h1748 =
	     x__h1638 |
	     adder_1_in1_BITS_7_TO_0_38_AND_adder_1_in2_BIT_ETC___d143[5] ;
  assign x__h1854 = x__h1856 & p__h859[7] ;
  assign x__h1856 =
	     x__h1746 |
	     adder_1_in1_BITS_7_TO_0_38_AND_adder_1_in2_BIT_ETC___d143[6] ;
  assign x__h2792 =
	     IF_adder_1_in1_BITS_15_TO_8_3_AND_adder_1_in2__ETC___d98[1] &
	     p__h2447[1] ;
  assign x__h2901 = x__h2903 & p__h2447[2] ;
  assign x__h2903 =
	     x__h2792 |
	     adder_1_in1_BITS_15_TO_8_3_AND_adder_1_in2_BIT_ETC___d96[1] ;
  assign x__h3009 = x__h3011 & p__h2447[3] ;
  assign x__h3011 =
	     x__h2901 |
	     adder_1_in1_BITS_15_TO_8_3_AND_adder_1_in2_BIT_ETC___d96[2] ;
  assign x__h3117 = x__h3119 & p__h2447[4] ;
  assign x__h3119 =
	     x__h3009 |
	     adder_1_in1_BITS_15_TO_8_3_AND_adder_1_in2_BIT_ETC___d96[3] ;
  assign x__h3225 = x__h3227 & p__h2447[5] ;
  assign x__h3227 =
	     x__h3117 |
	     adder_1_in1_BITS_15_TO_8_3_AND_adder_1_in2_BIT_ETC___d96[4] ;
  assign x__h3333 = x__h3335 & p__h2447[6] ;
  assign x__h3335 =
	     x__h3225 |
	     adder_1_in1_BITS_15_TO_8_3_AND_adder_1_in2_BIT_ETC___d96[5] ;
  assign x__h3441 = x__h3443 & p__h2447[7] ;
  assign x__h3443 =
	     x__h3333 |
	     adder_1_in1_BITS_15_TO_8_3_AND_adder_1_in2_BIT_ETC___d96[6] ;
  assign x__h5522 =
	     IF_adder_1_in1_BITS_23_TO_16_9_AND_adder_1_in2_ETC___d54[1] &
	     p__h5177[1] ;
  assign x__h5631 = x__h5633 & p__h5177[2] ;
  assign x__h5633 =
	     x__h5522 |
	     adder_1_in1_BITS_23_TO_16_9_AND_adder_1_in2_BI_ETC___d52[1] ;
  assign x__h5739 = x__h5741 & p__h5177[3] ;
  assign x__h5741 =
	     x__h5631 |
	     adder_1_in1_BITS_23_TO_16_9_AND_adder_1_in2_BI_ETC___d52[2] ;
  assign x__h5847 = x__h5849 & p__h5177[4] ;
  assign x__h5849 =
	     x__h5739 |
	     adder_1_in1_BITS_23_TO_16_9_AND_adder_1_in2_BI_ETC___d52[3] ;
  assign x__h5955 = x__h5957 & p__h5177[5] ;
  assign x__h5957 =
	     x__h5847 |
	     adder_1_in1_BITS_23_TO_16_9_AND_adder_1_in2_BI_ETC___d52[4] ;
  assign x__h6063 = x__h6065 & p__h5177[6] ;
  assign x__h6065 =
	     x__h5955 |
	     adder_1_in1_BITS_23_TO_16_9_AND_adder_1_in2_BI_ETC___d52[5] ;
  assign x__h6171 = x__h6173 & p__h5177[7] ;
  assign x__h6173 =
	     x__h6063 |
	     adder_1_in1_BITS_23_TO_16_9_AND_adder_1_in2_BI_ETC___d52[6] ;
  assign x__h8252 =
	     IF_adder_1_in1_BITS_31_TO_24_AND_adder_1_in2_B_ETC___d10[1] &
	     p__h7907[1] ;
  assign x__h8361 = x__h8363 & p__h7907[2] ;
  assign x__h8363 =
	     x__h8252 |
	     adder_1_in1_BITS_31_TO_24_AND_adder_1_in2_BITS_ETC___d8[1] ;
  assign x__h8469 = x__h8471 & p__h7907[3] ;
  assign x__h8471 =
	     x__h8361 |
	     adder_1_in1_BITS_31_TO_24_AND_adder_1_in2_BITS_ETC___d8[2] ;
  assign x__h8577 = x__h8579 & p__h7907[4] ;
  assign x__h8579 =
	     x__h8469 |
	     adder_1_in1_BITS_31_TO_24_AND_adder_1_in2_BITS_ETC___d8[3] ;
  assign x__h8685 = x__h8687 & p__h7907[5] ;
  assign x__h8687 =
	     x__h8577 |
	     adder_1_in1_BITS_31_TO_24_AND_adder_1_in2_BITS_ETC___d8[4] ;
  assign x__h8793 = x__h8795 & p__h7907[6] ;
  assign x__h8795 =
	     x__h8685 |
	     adder_1_in1_BITS_31_TO_24_AND_adder_1_in2_BITS_ETC___d8[5] ;
  assign x__h8901 = x__h8903 & p__h7907[7] ;
  assign x__h8903 =
	     x__h8793 |
	     adder_1_in1_BITS_31_TO_24_AND_adder_1_in2_BITS_ETC___d8[6] ;
  assign y__h11406 = adder_1_in2[31] ^ adder_1_result[31] ;
  assign y__h11591 = { 32'b0, cin } ;
  assign y__h11753 = { 1'd0, b } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        a <= `BSV_ASSIGNMENT_DELAY 32'h70000000;
	adder_1_available <= `BSV_ASSIGNMENT_DELAY 1'd1;
	adder_1_cin <= `BSV_ASSIGNMENT_DELAY 1'd0;
	adder_1_in1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	adder_1_in2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	adder_1_result <= `BSV_ASSIGNMENT_DELAY 33'd0;
	b <= `BSV_ASSIGNMENT_DELAY 32'h10000000;
	cin <= `BSV_ASSIGNMENT_DELAY 1'd1;
	count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	cout <= `BSV_ASSIGNMENT_DELAY 1'd0;
	overflow_flag <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rng_a_r <= `BSV_ASSIGNMENT_DELAY 32'd1;
	rng_b_r <= `BSV_ASSIGNMENT_DELAY 32'd1;
	rng_cin_r <= `BSV_ASSIGNMENT_DELAY 8'd1;
	state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	sum <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (a_EN) a <= `BSV_ASSIGNMENT_DELAY a_D_IN;
	if (adder_1_available_EN)
	  adder_1_available <= `BSV_ASSIGNMENT_DELAY adder_1_available_D_IN;
	if (adder_1_cin_EN)
	  adder_1_cin <= `BSV_ASSIGNMENT_DELAY adder_1_cin_D_IN;
	if (adder_1_in1_EN)
	  adder_1_in1 <= `BSV_ASSIGNMENT_DELAY adder_1_in1_D_IN;
	if (adder_1_in2_EN)
	  adder_1_in2 <= `BSV_ASSIGNMENT_DELAY adder_1_in2_D_IN;
	if (adder_1_result_EN)
	  adder_1_result <= `BSV_ASSIGNMENT_DELAY adder_1_result_D_IN;
	if (b_EN) b <= `BSV_ASSIGNMENT_DELAY b_D_IN;
	if (cin_EN) cin <= `BSV_ASSIGNMENT_DELAY cin_D_IN;
	if (count_EN) count <= `BSV_ASSIGNMENT_DELAY count_D_IN;
	if (cout_EN) cout <= `BSV_ASSIGNMENT_DELAY cout_D_IN;
	if (overflow_flag_EN)
	  overflow_flag <= `BSV_ASSIGNMENT_DELAY overflow_flag_D_IN;
	if (rng_a_r_EN) rng_a_r <= `BSV_ASSIGNMENT_DELAY rng_a_r_D_IN;
	if (rng_b_r_EN) rng_b_r <= `BSV_ASSIGNMENT_DELAY rng_b_r_D_IN;
	if (rng_cin_r_EN) rng_cin_r <= `BSV_ASSIGNMENT_DELAY rng_cin_r_D_IN;
	if (state_EN) state <= `BSV_ASSIGNMENT_DELAY state_D_IN;
	if (sum_EN) sum <= `BSV_ASSIGNMENT_DELAY sum_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    a = 32'hAAAAAAAA;
    adder_1_available = 1'h0;
    adder_1_cin = 1'h0;
    adder_1_in1 = 32'hAAAAAAAA;
    adder_1_in2 = 32'hAAAAAAAA;
    adder_1_result = 33'h0AAAAAAAA;
    b = 32'hAAAAAAAA;
    cin = 1'h0;
    count = 8'hAA;
    cout = 1'h0;
    overflow_flag = 1'h0;
    rng_a_r = 32'hAAAAAAAA;
    rng_b_r = 32'hAAAAAAAA;
    rng_cin_r = 8'hAA;
    state = 2'h2;
    sum = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_results && count_11_ULT_30___d326 &&
	  _0_CONCAT_a_27_28_PLUS_0_CONCAT_b_29_30_31_PLUS_ETC___d338)
	$display("Test Passed");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_results && count_11_ULT_30___d326 &&
	  !_0_CONCAT_a_27_28_PLUS_0_CONCAT_b_29_30_31_PLUS_ETC___d338)
	$display("Test Failed: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_results && count_11_ULT_30___d326 &&
	  !_0_CONCAT_a_27_28_PLUS_0_CONCAT_b_29_30_31_PLUS_ETC___d338)
	$display("  %32b\n+ %32b\n+\t\t\t\t %0b\n= \n  %32b", a, b, cin, sum);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_results && count_11_ULT_30___d326 &&
	  !_0_CONCAT_a_27_28_PLUS_0_CONCAT_b_29_30_31_PLUS_ETC___d338)
	$display(" %33b", expected_sum__h11572);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_results && count_11_ULT_30___d326 &&
	  !_0_CONCAT_a_27_28_PLUS_0_CONCAT_b_29_30_31_PLUS_ETC___d338)
	$display("Cout = %0b", cout);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_results && count_11_ULT_30___d326 &&
	  !_0_CONCAT_a_27_28_PLUS_0_CONCAT_b_29_30_31_PLUS_ETC___d338)
	$display("Overflow Flag = %0h\n", overflow_flag);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_results && count_11_ULT_30___d326 &&
	  overflow_flag)
	$display("Overflow occured");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_results && !count_11_ULT_30___d326)
	$finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mkTestbench

