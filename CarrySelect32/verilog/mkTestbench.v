//
// Generated by Bluespec Compiler, version 2024.01-13-ga8fe68a6 (build a8fe68a6)
//
// On Tue Jun 11 10:59:16 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTestbench(CLK,
		   RST_N);
  input  CLK;
  input  RST_N;

  // register a
  reg [31 : 0] a;
  wire [31 : 0] a_D_IN;
  wire a_EN;

  // register adder_1_available
  reg adder_1_available;
  wire adder_1_available_D_IN, adder_1_available_EN;

  // register adder_1_cin
  reg adder_1_cin;
  wire adder_1_cin_D_IN, adder_1_cin_EN;

  // register adder_1_in1
  reg [31 : 0] adder_1_in1;
  wire [31 : 0] adder_1_in1_D_IN;
  wire adder_1_in1_EN;

  // register adder_1_in2
  reg [31 : 0] adder_1_in2;
  wire [31 : 0] adder_1_in2_D_IN;
  wire adder_1_in2_EN;

  // register adder_1_result
  reg [32 : 0] adder_1_result;
  wire [32 : 0] adder_1_result_D_IN;
  wire adder_1_result_EN;

  // register b
  reg [31 : 0] b;
  wire [31 : 0] b_D_IN;
  wire b_EN;

  // register cin
  reg cin;
  wire cin_D_IN, cin_EN;

  // register count
  reg [7 : 0] count;
  wire [7 : 0] count_D_IN;
  wire count_EN;

  // register cout
  reg cout;
  wire cout_D_IN, cout_EN;

  // register overflow_flag
  reg overflow_flag;
  wire overflow_flag_D_IN, overflow_flag_EN;

  // register rng_a_r
  reg [31 : 0] rng_a_r;
  wire [31 : 0] rng_a_r_D_IN;
  wire rng_a_r_EN;

  // register rng_b_r
  reg [31 : 0] rng_b_r;
  wire [31 : 0] rng_b_r_D_IN;
  wire rng_b_r_EN;

  // register rng_cin_r
  reg [7 : 0] rng_cin_r;
  wire [7 : 0] rng_cin_r_D_IN;
  wire rng_cin_r_EN;

  // register state
  reg [1 : 0] state;
  reg [1 : 0] state_D_IN;
  wire state_EN;

  // register sum
  reg [31 : 0] sum;
  wire [31 : 0] sum_D_IN;
  wire sum_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_adder_1_call_compute,
       CAN_FIRE_RL_display_results,
       CAN_FIRE_RL_generate_random_inputs,
       CAN_FIRE_RL_get_results,
       CAN_FIRE_RL_initialize,
       WILL_FIRE_RL_adder_1_call_compute,
       WILL_FIRE_RL_display_results,
       WILL_FIRE_RL_generate_random_inputs,
       WILL_FIRE_RL_get_results,
       WILL_FIRE_RL_initialize;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_rng_a_r_write_1__VAL_1, MUX_rng_b_r_write_1__VAL_1;
  wire [7 : 0] MUX_rng_cin_r_write_1__VAL_1;
  wire MUX_state_write_1__SEL_1;

  // remaining internal signals
  wire [32 : 0] calculated_sum__h11846,
		expected_sum__h11845,
		x__h12054,
		x__h12056,
		y__h11864,
		y__h12057;
  wire [8 : 0] IF_adder_1_in1_BITS_15_TO_8_0_AND_adder_1_in2__ETC___d97,
	       IF_adder_1_in1_BITS_15_TO_8_0_XOR_adder_1_in2__ETC___d67,
	       IF_adder_1_in1_BITS_23_TO_16_14_AND_adder_1_in_ETC___d151,
	       IF_adder_1_in1_BITS_23_TO_16_14_XOR_adder_1_in_ETC___d121,
	       IF_adder_1_in1_BITS_31_TO_24_68_AND_adder_1_in_ETC___d205,
	       IF_adder_1_in1_BITS_31_TO_24_68_XOR_adder_1_in_ETC___d175,
	       IF_adder_1_in1_BITS_7_TO_0_AND_adder_1_in2_BIT_ETC___d43,
	       IF_adder_1_in1_BITS_7_TO_0_XOR_adder_1_in2_BIT_ETC___d13;
  wire [7 : 0] adder_1_in1_BITS_15_TO_8_0_AND_adder_1_in2_BIT_ETC___d64,
	       adder_1_in1_BITS_23_TO_16_14_AND_adder_1_in2_B_ETC___d118,
	       adder_1_in1_BITS_31_TO_24_68_AND_adder_1_in2_B_ETC___d172,
	       adder_1_in1_BITS_7_TO_0_AND_adder_1_in2_BITS_7_ETC___d10,
	       p__h2106,
	       p__h4513,
	       p__h6924,
	       p__h9335,
	       spliced_bits__h556,
	       spliced_bits__h590,
	       spliced_bits__h624,
	       spliced_bits__h658,
	       sum_val__h2110,
	       sum_val__h3380,
	       sum_val__h4517,
	       sum_val__h5791,
	       sum_val__h6928,
	       sum_val__h8202,
	       sum_val__h877,
	       sum_val__h9339;
  wire IF_IF_IF_IF_adder_1_cin_THEN_IF_adder_1_in1_BI_ETC___d221,
       IF_IF_IF_adder_1_cin_THEN_IF_adder_1_in1_BITS__ETC___d167,
       IF_IF_adder_1_cin_THEN_IF_adder_1_in1_BITS_7_T_ETC___d113,
       IF_adder_1_cin_THEN_IF_adder_1_in1_BITS_7_TO_0_ETC___d59,
       _0_CONCAT_a_33_34_PLUS_0_CONCAT_b_35_36_37_PLUS_ETC___d344,
       count_17_ULT_30___d332,
       x__h10005,
       x__h10007,
       x__h10113,
       x__h10115,
       x__h10221,
       x__h10223,
       x__h10329,
       x__h10331,
       x__h11678,
       x__h11680,
       x__h1220,
       x__h1329,
       x__h1331,
       x__h1437,
       x__h1439,
       x__h1545,
       x__h1547,
       x__h1653,
       x__h1655,
       x__h1761,
       x__h1763,
       x__h1869,
       x__h1871,
       x__h2451,
       x__h2560,
       x__h2562,
       x__h2668,
       x__h2670,
       x__h2776,
       x__h2778,
       x__h2884,
       x__h2886,
       x__h2992,
       x__h2994,
       x__h3100,
       x__h3102,
       x__h3721,
       x__h3830,
       x__h3832,
       x__h3938,
       x__h3940,
       x__h4046,
       x__h4048,
       x__h4154,
       x__h4156,
       x__h4262,
       x__h4264,
       x__h4370,
       x__h4372,
       x__h4858,
       x__h4967,
       x__h4969,
       x__h5075,
       x__h5077,
       x__h5183,
       x__h5185,
       x__h5291,
       x__h5293,
       x__h5399,
       x__h5401,
       x__h5507,
       x__h5509,
       x__h6132,
       x__h6241,
       x__h6243,
       x__h6349,
       x__h6351,
       x__h6457,
       x__h6459,
       x__h6565,
       x__h6567,
       x__h6673,
       x__h6675,
       x__h6781,
       x__h6783,
       x__h7269,
       x__h7378,
       x__h7380,
       x__h7486,
       x__h7488,
       x__h7594,
       x__h7596,
       x__h7702,
       x__h7704,
       x__h7810,
       x__h7812,
       x__h7918,
       x__h7920,
       x__h8543,
       x__h8652,
       x__h8654,
       x__h8760,
       x__h8762,
       x__h8868,
       x__h8870,
       x__h8976,
       x__h8978,
       x__h9084,
       x__h9086,
       x__h9192,
       x__h9194,
       x__h9680,
       x__h9789,
       x__h9791,
       x__h9897,
       x__h9899,
       y__h11679;

  // rule RL_initialize
  assign CAN_FIRE_RL_initialize = state == 2'd0 ;
  assign WILL_FIRE_RL_initialize = CAN_FIRE_RL_initialize ;

  // rule RL_get_results
  assign CAN_FIRE_RL_get_results = adder_1_available && state == 2'd2 ;
  assign WILL_FIRE_RL_get_results = CAN_FIRE_RL_get_results ;

  // rule RL_display_results
  assign CAN_FIRE_RL_display_results = state == 2'd3 ;
  assign WILL_FIRE_RL_display_results = CAN_FIRE_RL_display_results ;

  // rule RL_adder_1_call_compute
  assign CAN_FIRE_RL_adder_1_call_compute = !adder_1_available ;
  assign WILL_FIRE_RL_adder_1_call_compute =
	     CAN_FIRE_RL_adder_1_call_compute ;

  // rule RL_generate_random_inputs
  assign CAN_FIRE_RL_generate_random_inputs = state == 2'd1 ;
  assign WILL_FIRE_RL_generate_random_inputs =
	     CAN_FIRE_RL_generate_random_inputs ;

  // inputs to muxes for submodule ports
  assign MUX_state_write_1__SEL_1 =
	     WILL_FIRE_RL_display_results && count_17_ULT_30___d332 ;
  assign MUX_rng_a_r_write_1__VAL_1 =
	     rng_a_r[0] ?
	       { 1'd1,
		 rng_a_r[31:8],
		 ~rng_a_r[7],
		 rng_a_r[6],
		 ~rng_a_r[5],
		 rng_a_r[4],
		 ~rng_a_r[3:1] } :
	       { 1'd0, rng_a_r[31:1] } ;
  assign MUX_rng_b_r_write_1__VAL_1 =
	     rng_b_r[0] ?
	       { 1'd1,
		 rng_b_r[31:8],
		 ~rng_b_r[7],
		 rng_b_r[6],
		 ~rng_b_r[5],
		 rng_b_r[4],
		 ~rng_b_r[3:1] } :
	       { 1'd0, rng_b_r[31:1] } ;
  assign MUX_rng_cin_r_write_1__VAL_1 =
	     rng_cin_r[0] ?
	       { 1'd1, rng_cin_r[7:5], ~rng_cin_r[4:2], rng_cin_r[1] } :
	       { 1'd0, rng_cin_r[7:1] } ;

  // register a
  assign a_D_IN = rng_a_r ;
  assign a_EN = CAN_FIRE_RL_generate_random_inputs ;

  // register adder_1_available
  assign adder_1_available_D_IN = !WILL_FIRE_RL_generate_random_inputs ;
  assign adder_1_available_EN =
	     WILL_FIRE_RL_generate_random_inputs ||
	     WILL_FIRE_RL_adder_1_call_compute ;

  // register adder_1_cin
  assign adder_1_cin_D_IN = rng_cin_r[3] ;
  assign adder_1_cin_EN = CAN_FIRE_RL_generate_random_inputs ;

  // register adder_1_in1
  assign adder_1_in1_D_IN = rng_a_r ;
  assign adder_1_in1_EN = CAN_FIRE_RL_generate_random_inputs ;

  // register adder_1_in2
  assign adder_1_in2_D_IN = rng_b_r ;
  assign adder_1_in2_EN = CAN_FIRE_RL_generate_random_inputs ;

  // register adder_1_result
  assign adder_1_result_D_IN =
	     { IF_IF_IF_IF_adder_1_cin_THEN_IF_adder_1_in1_BI_ETC___d221,
	       spliced_bits__h556,
	       spliced_bits__h590,
	       spliced_bits__h624,
	       spliced_bits__h658 } ;
  assign adder_1_result_EN = CAN_FIRE_RL_adder_1_call_compute ;

  // register b
  assign b_D_IN = rng_b_r ;
  assign b_EN = CAN_FIRE_RL_generate_random_inputs ;

  // register cin
  assign cin_D_IN = rng_cin_r[3] ;
  assign cin_EN = CAN_FIRE_RL_generate_random_inputs ;

  // register count
  assign count_D_IN = count + 8'd1 ;
  assign count_EN = CAN_FIRE_RL_generate_random_inputs ;

  // register cout
  assign cout_D_IN = adder_1_result[32] ;
  assign cout_EN = CAN_FIRE_RL_get_results ;

  // register overflow_flag
  assign overflow_flag_D_IN = x__h11678 & y__h11679 ;
  assign overflow_flag_EN = CAN_FIRE_RL_get_results ;

  // register rng_a_r
  assign rng_a_r_D_IN =
	     WILL_FIRE_RL_generate_random_inputs ?
	       MUX_rng_a_r_write_1__VAL_1 :
	       32'h0000AFD7 ;
  assign rng_a_r_EN =
	     WILL_FIRE_RL_generate_random_inputs || WILL_FIRE_RL_initialize ;

  // register rng_b_r
  assign rng_b_r_D_IN =
	     WILL_FIRE_RL_generate_random_inputs ?
	       MUX_rng_b_r_write_1__VAL_1 :
	       32'h0000C9B1 ;
  assign rng_b_r_EN =
	     WILL_FIRE_RL_generate_random_inputs || WILL_FIRE_RL_initialize ;

  // register rng_cin_r
  assign rng_cin_r_D_IN =
	     WILL_FIRE_RL_generate_random_inputs ?
	       MUX_rng_cin_r_write_1__VAL_1 :
	       8'hA5 ;
  assign rng_cin_r_EN =
	     WILL_FIRE_RL_generate_random_inputs || WILL_FIRE_RL_initialize ;

  // register state
  always@(MUX_state_write_1__SEL_1 or
	  WILL_FIRE_RL_initialize or
	  WILL_FIRE_RL_generate_random_inputs or WILL_FIRE_RL_get_results)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_state_write_1__SEL_1 || WILL_FIRE_RL_initialize: state_D_IN = 2'd1;
      WILL_FIRE_RL_generate_random_inputs: state_D_IN = 2'd2;
      WILL_FIRE_RL_get_results: state_D_IN = 2'd3;
      default: state_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign state_EN =
	     WILL_FIRE_RL_display_results && count_17_ULT_30___d332 ||
	     WILL_FIRE_RL_initialize ||
	     WILL_FIRE_RL_generate_random_inputs ||
	     WILL_FIRE_RL_get_results ;

  // register sum
  assign sum_D_IN = adder_1_result[31:0] ;
  assign sum_EN = CAN_FIRE_RL_get_results ;

  // remaining internal signals
  assign IF_IF_IF_IF_adder_1_cin_THEN_IF_adder_1_in1_BI_ETC___d221 =
	     IF_IF_IF_adder_1_cin_THEN_IF_adder_1_in1_BITS__ETC___d167 ?
	       x__h9192 |
	       adder_1_in1_BITS_31_TO_24_68_AND_adder_1_in2_B_ETC___d172[7] :
	       x__h10329 |
	       adder_1_in1_BITS_31_TO_24_68_AND_adder_1_in2_B_ETC___d172[7] ;
  assign IF_IF_IF_adder_1_cin_THEN_IF_adder_1_in1_BITS__ETC___d167 =
	     IF_IF_adder_1_cin_THEN_IF_adder_1_in1_BITS_7_T_ETC___d113 ?
	       x__h6781 |
	       adder_1_in1_BITS_23_TO_16_14_AND_adder_1_in2_B_ETC___d118[7] :
	       x__h7918 |
	       adder_1_in1_BITS_23_TO_16_14_AND_adder_1_in2_B_ETC___d118[7] ;
  assign IF_IF_adder_1_cin_THEN_IF_adder_1_in1_BITS_7_T_ETC___d113 =
	     IF_adder_1_cin_THEN_IF_adder_1_in1_BITS_7_TO_0_ETC___d59 ?
	       x__h4370 |
	       adder_1_in1_BITS_15_TO_8_0_AND_adder_1_in2_BIT_ETC___d64[7] :
	       x__h5507 |
	       adder_1_in1_BITS_15_TO_8_0_AND_adder_1_in2_BIT_ETC___d64[7] ;
  assign IF_adder_1_cin_THEN_IF_adder_1_in1_BITS_7_TO_0_ETC___d59 =
	     adder_1_cin ?
	       x__h1869 |
	       adder_1_in1_BITS_7_TO_0_AND_adder_1_in2_BITS_7_ETC___d10[7] :
	       x__h3100 |
	       adder_1_in1_BITS_7_TO_0_AND_adder_1_in2_BITS_7_ETC___d10[7] ;
  assign IF_adder_1_in1_BITS_15_TO_8_0_AND_adder_1_in2__ETC___d97 =
	     adder_1_in1_BITS_15_TO_8_0_AND_adder_1_in2_BIT_ETC___d64[0] ?
	       9'd2 :
	       9'd0 ;
  assign IF_adder_1_in1_BITS_15_TO_8_0_XOR_adder_1_in2__ETC___d67 =
	     (p__h4513[0] |
	      adder_1_in1_BITS_15_TO_8_0_AND_adder_1_in2_BIT_ETC___d64[0]) ?
	       9'd3 :
	       9'd1 ;
  assign IF_adder_1_in1_BITS_23_TO_16_14_AND_adder_1_in_ETC___d151 =
	     adder_1_in1_BITS_23_TO_16_14_AND_adder_1_in2_B_ETC___d118[0] ?
	       9'd2 :
	       9'd0 ;
  assign IF_adder_1_in1_BITS_23_TO_16_14_XOR_adder_1_in_ETC___d121 =
	     (p__h6924[0] |
	      adder_1_in1_BITS_23_TO_16_14_AND_adder_1_in2_B_ETC___d118[0]) ?
	       9'd3 :
	       9'd1 ;
  assign IF_adder_1_in1_BITS_31_TO_24_68_AND_adder_1_in_ETC___d205 =
	     adder_1_in1_BITS_31_TO_24_68_AND_adder_1_in2_B_ETC___d172[0] ?
	       9'd2 :
	       9'd0 ;
  assign IF_adder_1_in1_BITS_31_TO_24_68_XOR_adder_1_in_ETC___d175 =
	     (p__h9335[0] |
	      adder_1_in1_BITS_31_TO_24_68_AND_adder_1_in2_B_ETC___d172[0]) ?
	       9'd3 :
	       9'd1 ;
  assign IF_adder_1_in1_BITS_7_TO_0_AND_adder_1_in2_BIT_ETC___d43 =
	     adder_1_in1_BITS_7_TO_0_AND_adder_1_in2_BITS_7_ETC___d10[0] ?
	       9'd2 :
	       9'd0 ;
  assign IF_adder_1_in1_BITS_7_TO_0_XOR_adder_1_in2_BIT_ETC___d13 =
	     (p__h2106[0] |
	      adder_1_in1_BITS_7_TO_0_AND_adder_1_in2_BITS_7_ETC___d10[0]) ?
	       9'd3 :
	       9'd1 ;
  assign _0_CONCAT_a_33_34_PLUS_0_CONCAT_b_35_36_37_PLUS_ETC___d344 =
	     expected_sum__h11845 == calculated_sum__h11846 ;
  assign adder_1_in1_BITS_15_TO_8_0_AND_adder_1_in2_BIT_ETC___d64 =
	     adder_1_in1[15:8] & adder_1_in2[15:8] ;
  assign adder_1_in1_BITS_23_TO_16_14_AND_adder_1_in2_B_ETC___d118 =
	     adder_1_in1[23:16] & adder_1_in2[23:16] ;
  assign adder_1_in1_BITS_31_TO_24_68_AND_adder_1_in2_B_ETC___d172 =
	     adder_1_in1[31:24] & adder_1_in2[31:24] ;
  assign adder_1_in1_BITS_7_TO_0_AND_adder_1_in2_BITS_7_ETC___d10 =
	     adder_1_in1[7:0] & adder_1_in2[7:0] ;
  assign calculated_sum__h11846 = { cout, sum } ;
  assign count_17_ULT_30___d332 = count < 8'd30 ;
  assign expected_sum__h11845 = x__h12054 + y__h11864 ;
  assign p__h2106 = adder_1_in1[7:0] ^ adder_1_in2[7:0] ;
  assign p__h4513 = adder_1_in1[15:8] ^ adder_1_in2[15:8] ;
  assign p__h6924 = adder_1_in1[23:16] ^ adder_1_in2[23:16] ;
  assign p__h9335 = adder_1_in1[31:24] ^ adder_1_in2[31:24] ;
  assign spliced_bits__h556 =
	     IF_IF_IF_adder_1_cin_THEN_IF_adder_1_in1_BITS__ETC___d167 ?
	       sum_val__h8202 :
	       sum_val__h9339 ;
  assign spliced_bits__h590 =
	     IF_IF_adder_1_cin_THEN_IF_adder_1_in1_BITS_7_T_ETC___d113 ?
	       sum_val__h5791 :
	       sum_val__h6928 ;
  assign spliced_bits__h624 =
	     IF_adder_1_cin_THEN_IF_adder_1_in1_BITS_7_TO_0_ETC___d59 ?
	       sum_val__h3380 :
	       sum_val__h4517 ;
  assign spliced_bits__h658 = adder_1_cin ? sum_val__h877 : sum_val__h2110 ;
  assign sum_val__h2110 =
	     p__h2106 ^
	     { x__h3102,
	       x__h2994,
	       x__h2886,
	       x__h2778,
	       x__h2670,
	       x__h2562,
	       IF_adder_1_in1_BITS_7_TO_0_AND_adder_1_in2_BIT_ETC___d43[1:0] } ;
  assign sum_val__h3380 =
	     p__h4513 ^
	     { x__h4372,
	       x__h4264,
	       x__h4156,
	       x__h4048,
	       x__h3940,
	       x__h3832,
	       IF_adder_1_in1_BITS_15_TO_8_0_XOR_adder_1_in2__ETC___d67[1:0] } ;
  assign sum_val__h4517 =
	     p__h4513 ^
	     { x__h5509,
	       x__h5401,
	       x__h5293,
	       x__h5185,
	       x__h5077,
	       x__h4969,
	       IF_adder_1_in1_BITS_15_TO_8_0_AND_adder_1_in2__ETC___d97[1:0] } ;
  assign sum_val__h5791 =
	     p__h6924 ^
	     { x__h6783,
	       x__h6675,
	       x__h6567,
	       x__h6459,
	       x__h6351,
	       x__h6243,
	       IF_adder_1_in1_BITS_23_TO_16_14_XOR_adder_1_in_ETC___d121[1:0] } ;
  assign sum_val__h6928 =
	     p__h6924 ^
	     { x__h7920,
	       x__h7812,
	       x__h7704,
	       x__h7596,
	       x__h7488,
	       x__h7380,
	       IF_adder_1_in1_BITS_23_TO_16_14_AND_adder_1_in_ETC___d151[1:0] } ;
  assign sum_val__h8202 =
	     p__h9335 ^
	     { x__h9194,
	       x__h9086,
	       x__h8978,
	       x__h8870,
	       x__h8762,
	       x__h8654,
	       IF_adder_1_in1_BITS_31_TO_24_68_XOR_adder_1_in_ETC___d175[1:0] } ;
  assign sum_val__h877 =
	     p__h2106 ^
	     { x__h1871,
	       x__h1763,
	       x__h1655,
	       x__h1547,
	       x__h1439,
	       x__h1331,
	       IF_adder_1_in1_BITS_7_TO_0_XOR_adder_1_in2_BIT_ETC___d13[1:0] } ;
  assign sum_val__h9339 =
	     p__h9335 ^
	     { x__h10331,
	       x__h10223,
	       x__h10115,
	       x__h10007,
	       x__h9899,
	       x__h9791,
	       IF_adder_1_in1_BITS_31_TO_24_68_AND_adder_1_in_ETC___d205[1:0] } ;
  assign x__h10005 = x__h10007 & p__h9335[4] ;
  assign x__h10007 =
	     x__h9897 |
	     adder_1_in1_BITS_31_TO_24_68_AND_adder_1_in2_B_ETC___d172[3] ;
  assign x__h10113 = x__h10115 & p__h9335[5] ;
  assign x__h10115 =
	     x__h10005 |
	     adder_1_in1_BITS_31_TO_24_68_AND_adder_1_in2_B_ETC___d172[4] ;
  assign x__h10221 = x__h10223 & p__h9335[6] ;
  assign x__h10223 =
	     x__h10113 |
	     adder_1_in1_BITS_31_TO_24_68_AND_adder_1_in2_B_ETC___d172[5] ;
  assign x__h10329 = x__h10331 & p__h9335[7] ;
  assign x__h10331 =
	     x__h10221 |
	     adder_1_in1_BITS_31_TO_24_68_AND_adder_1_in2_B_ETC___d172[6] ;
  assign x__h11678 = x__h11680 ^ adder_1_in2[31] ;
  assign x__h11680 = ~adder_1_in1[31] ;
  assign x__h12054 = x__h12056 + y__h12057 ;
  assign x__h12056 = { 1'd0, a } ;
  assign x__h1220 =
	     IF_adder_1_in1_BITS_7_TO_0_XOR_adder_1_in2_BIT_ETC___d13[1] &
	     p__h2106[1] ;
  assign x__h1329 = x__h1331 & p__h2106[2] ;
  assign x__h1331 =
	     x__h1220 |
	     adder_1_in1_BITS_7_TO_0_AND_adder_1_in2_BITS_7_ETC___d10[1] ;
  assign x__h1437 = x__h1439 & p__h2106[3] ;
  assign x__h1439 =
	     x__h1329 |
	     adder_1_in1_BITS_7_TO_0_AND_adder_1_in2_BITS_7_ETC___d10[2] ;
  assign x__h1545 = x__h1547 & p__h2106[4] ;
  assign x__h1547 =
	     x__h1437 |
	     adder_1_in1_BITS_7_TO_0_AND_adder_1_in2_BITS_7_ETC___d10[3] ;
  assign x__h1653 = x__h1655 & p__h2106[5] ;
  assign x__h1655 =
	     x__h1545 |
	     adder_1_in1_BITS_7_TO_0_AND_adder_1_in2_BITS_7_ETC___d10[4] ;
  assign x__h1761 = x__h1763 & p__h2106[6] ;
  assign x__h1763 =
	     x__h1653 |
	     adder_1_in1_BITS_7_TO_0_AND_adder_1_in2_BITS_7_ETC___d10[5] ;
  assign x__h1869 = x__h1871 & p__h2106[7] ;
  assign x__h1871 =
	     x__h1761 |
	     adder_1_in1_BITS_7_TO_0_AND_adder_1_in2_BITS_7_ETC___d10[6] ;
  assign x__h2451 =
	     IF_adder_1_in1_BITS_7_TO_0_AND_adder_1_in2_BIT_ETC___d43[1] &
	     p__h2106[1] ;
  assign x__h2560 = x__h2562 & p__h2106[2] ;
  assign x__h2562 =
	     x__h2451 |
	     adder_1_in1_BITS_7_TO_0_AND_adder_1_in2_BITS_7_ETC___d10[1] ;
  assign x__h2668 = x__h2670 & p__h2106[3] ;
  assign x__h2670 =
	     x__h2560 |
	     adder_1_in1_BITS_7_TO_0_AND_adder_1_in2_BITS_7_ETC___d10[2] ;
  assign x__h2776 = x__h2778 & p__h2106[4] ;
  assign x__h2778 =
	     x__h2668 |
	     adder_1_in1_BITS_7_TO_0_AND_adder_1_in2_BITS_7_ETC___d10[3] ;
  assign x__h2884 = x__h2886 & p__h2106[5] ;
  assign x__h2886 =
	     x__h2776 |
	     adder_1_in1_BITS_7_TO_0_AND_adder_1_in2_BITS_7_ETC___d10[4] ;
  assign x__h2992 = x__h2994 & p__h2106[6] ;
  assign x__h2994 =
	     x__h2884 |
	     adder_1_in1_BITS_7_TO_0_AND_adder_1_in2_BITS_7_ETC___d10[5] ;
  assign x__h3100 = x__h3102 & p__h2106[7] ;
  assign x__h3102 =
	     x__h2992 |
	     adder_1_in1_BITS_7_TO_0_AND_adder_1_in2_BITS_7_ETC___d10[6] ;
  assign x__h3721 =
	     IF_adder_1_in1_BITS_15_TO_8_0_XOR_adder_1_in2__ETC___d67[1] &
	     p__h4513[1] ;
  assign x__h3830 = x__h3832 & p__h4513[2] ;
  assign x__h3832 =
	     x__h3721 |
	     adder_1_in1_BITS_15_TO_8_0_AND_adder_1_in2_BIT_ETC___d64[1] ;
  assign x__h3938 = x__h3940 & p__h4513[3] ;
  assign x__h3940 =
	     x__h3830 |
	     adder_1_in1_BITS_15_TO_8_0_AND_adder_1_in2_BIT_ETC___d64[2] ;
  assign x__h4046 = x__h4048 & p__h4513[4] ;
  assign x__h4048 =
	     x__h3938 |
	     adder_1_in1_BITS_15_TO_8_0_AND_adder_1_in2_BIT_ETC___d64[3] ;
  assign x__h4154 = x__h4156 & p__h4513[5] ;
  assign x__h4156 =
	     x__h4046 |
	     adder_1_in1_BITS_15_TO_8_0_AND_adder_1_in2_BIT_ETC___d64[4] ;
  assign x__h4262 = x__h4264 & p__h4513[6] ;
  assign x__h4264 =
	     x__h4154 |
	     adder_1_in1_BITS_15_TO_8_0_AND_adder_1_in2_BIT_ETC___d64[5] ;
  assign x__h4370 = x__h4372 & p__h4513[7] ;
  assign x__h4372 =
	     x__h4262 |
	     adder_1_in1_BITS_15_TO_8_0_AND_adder_1_in2_BIT_ETC___d64[6] ;
  assign x__h4858 =
	     IF_adder_1_in1_BITS_15_TO_8_0_AND_adder_1_in2__ETC___d97[1] &
	     p__h4513[1] ;
  assign x__h4967 = x__h4969 & p__h4513[2] ;
  assign x__h4969 =
	     x__h4858 |
	     adder_1_in1_BITS_15_TO_8_0_AND_adder_1_in2_BIT_ETC___d64[1] ;
  assign x__h5075 = x__h5077 & p__h4513[3] ;
  assign x__h5077 =
	     x__h4967 |
	     adder_1_in1_BITS_15_TO_8_0_AND_adder_1_in2_BIT_ETC___d64[2] ;
  assign x__h5183 = x__h5185 & p__h4513[4] ;
  assign x__h5185 =
	     x__h5075 |
	     adder_1_in1_BITS_15_TO_8_0_AND_adder_1_in2_BIT_ETC___d64[3] ;
  assign x__h5291 = x__h5293 & p__h4513[5] ;
  assign x__h5293 =
	     x__h5183 |
	     adder_1_in1_BITS_15_TO_8_0_AND_adder_1_in2_BIT_ETC___d64[4] ;
  assign x__h5399 = x__h5401 & p__h4513[6] ;
  assign x__h5401 =
	     x__h5291 |
	     adder_1_in1_BITS_15_TO_8_0_AND_adder_1_in2_BIT_ETC___d64[5] ;
  assign x__h5507 = x__h5509 & p__h4513[7] ;
  assign x__h5509 =
	     x__h5399 |
	     adder_1_in1_BITS_15_TO_8_0_AND_adder_1_in2_BIT_ETC___d64[6] ;
  assign x__h6132 =
	     IF_adder_1_in1_BITS_23_TO_16_14_XOR_adder_1_in_ETC___d121[1] &
	     p__h6924[1] ;
  assign x__h6241 = x__h6243 & p__h6924[2] ;
  assign x__h6243 =
	     x__h6132 |
	     adder_1_in1_BITS_23_TO_16_14_AND_adder_1_in2_B_ETC___d118[1] ;
  assign x__h6349 = x__h6351 & p__h6924[3] ;
  assign x__h6351 =
	     x__h6241 |
	     adder_1_in1_BITS_23_TO_16_14_AND_adder_1_in2_B_ETC___d118[2] ;
  assign x__h6457 = x__h6459 & p__h6924[4] ;
  assign x__h6459 =
	     x__h6349 |
	     adder_1_in1_BITS_23_TO_16_14_AND_adder_1_in2_B_ETC___d118[3] ;
  assign x__h6565 = x__h6567 & p__h6924[5] ;
  assign x__h6567 =
	     x__h6457 |
	     adder_1_in1_BITS_23_TO_16_14_AND_adder_1_in2_B_ETC___d118[4] ;
  assign x__h6673 = x__h6675 & p__h6924[6] ;
  assign x__h6675 =
	     x__h6565 |
	     adder_1_in1_BITS_23_TO_16_14_AND_adder_1_in2_B_ETC___d118[5] ;
  assign x__h6781 = x__h6783 & p__h6924[7] ;
  assign x__h6783 =
	     x__h6673 |
	     adder_1_in1_BITS_23_TO_16_14_AND_adder_1_in2_B_ETC___d118[6] ;
  assign x__h7269 =
	     IF_adder_1_in1_BITS_23_TO_16_14_AND_adder_1_in_ETC___d151[1] &
	     p__h6924[1] ;
  assign x__h7378 = x__h7380 & p__h6924[2] ;
  assign x__h7380 =
	     x__h7269 |
	     adder_1_in1_BITS_23_TO_16_14_AND_adder_1_in2_B_ETC___d118[1] ;
  assign x__h7486 = x__h7488 & p__h6924[3] ;
  assign x__h7488 =
	     x__h7378 |
	     adder_1_in1_BITS_23_TO_16_14_AND_adder_1_in2_B_ETC___d118[2] ;
  assign x__h7594 = x__h7596 & p__h6924[4] ;
  assign x__h7596 =
	     x__h7486 |
	     adder_1_in1_BITS_23_TO_16_14_AND_adder_1_in2_B_ETC___d118[3] ;
  assign x__h7702 = x__h7704 & p__h6924[5] ;
  assign x__h7704 =
	     x__h7594 |
	     adder_1_in1_BITS_23_TO_16_14_AND_adder_1_in2_B_ETC___d118[4] ;
  assign x__h7810 = x__h7812 & p__h6924[6] ;
  assign x__h7812 =
	     x__h7702 |
	     adder_1_in1_BITS_23_TO_16_14_AND_adder_1_in2_B_ETC___d118[5] ;
  assign x__h7918 = x__h7920 & p__h6924[7] ;
  assign x__h7920 =
	     x__h7810 |
	     adder_1_in1_BITS_23_TO_16_14_AND_adder_1_in2_B_ETC___d118[6] ;
  assign x__h8543 =
	     IF_adder_1_in1_BITS_31_TO_24_68_XOR_adder_1_in_ETC___d175[1] &
	     p__h9335[1] ;
  assign x__h8652 = x__h8654 & p__h9335[2] ;
  assign x__h8654 =
	     x__h8543 |
	     adder_1_in1_BITS_31_TO_24_68_AND_adder_1_in2_B_ETC___d172[1] ;
  assign x__h8760 = x__h8762 & p__h9335[3] ;
  assign x__h8762 =
	     x__h8652 |
	     adder_1_in1_BITS_31_TO_24_68_AND_adder_1_in2_B_ETC___d172[2] ;
  assign x__h8868 = x__h8870 & p__h9335[4] ;
  assign x__h8870 =
	     x__h8760 |
	     adder_1_in1_BITS_31_TO_24_68_AND_adder_1_in2_B_ETC___d172[3] ;
  assign x__h8976 = x__h8978 & p__h9335[5] ;
  assign x__h8978 =
	     x__h8868 |
	     adder_1_in1_BITS_31_TO_24_68_AND_adder_1_in2_B_ETC___d172[4] ;
  assign x__h9084 = x__h9086 & p__h9335[6] ;
  assign x__h9086 =
	     x__h8976 |
	     adder_1_in1_BITS_31_TO_24_68_AND_adder_1_in2_B_ETC___d172[5] ;
  assign x__h9192 = x__h9194 & p__h9335[7] ;
  assign x__h9194 =
	     x__h9084 |
	     adder_1_in1_BITS_31_TO_24_68_AND_adder_1_in2_B_ETC___d172[6] ;
  assign x__h9680 =
	     IF_adder_1_in1_BITS_31_TO_24_68_AND_adder_1_in_ETC___d205[1] &
	     p__h9335[1] ;
  assign x__h9789 = x__h9791 & p__h9335[2] ;
  assign x__h9791 =
	     x__h9680 |
	     adder_1_in1_BITS_31_TO_24_68_AND_adder_1_in2_B_ETC___d172[1] ;
  assign x__h9897 = x__h9899 & p__h9335[3] ;
  assign x__h9899 =
	     x__h9789 |
	     adder_1_in1_BITS_31_TO_24_68_AND_adder_1_in2_B_ETC___d172[2] ;
  assign y__h11679 = adder_1_in2[31] ^ adder_1_result[31] ;
  assign y__h11864 = { 32'b0, cin } ;
  assign y__h12057 = { 1'd0, b } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        a <= `BSV_ASSIGNMENT_DELAY 32'h00007000;
	adder_1_available <= `BSV_ASSIGNMENT_DELAY 1'd1;
	adder_1_cin <= `BSV_ASSIGNMENT_DELAY 1'd0;
	adder_1_in1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	adder_1_in2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	adder_1_result <= `BSV_ASSIGNMENT_DELAY 33'd0;
	b <= `BSV_ASSIGNMENT_DELAY 32'h00001000;
	cin <= `BSV_ASSIGNMENT_DELAY 1'd1;
	count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	cout <= `BSV_ASSIGNMENT_DELAY 1'd0;
	overflow_flag <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rng_a_r <= `BSV_ASSIGNMENT_DELAY 32'd1;
	rng_b_r <= `BSV_ASSIGNMENT_DELAY 32'd1;
	rng_cin_r <= `BSV_ASSIGNMENT_DELAY 8'd1;
	state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	sum <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (a_EN) a <= `BSV_ASSIGNMENT_DELAY a_D_IN;
	if (adder_1_available_EN)
	  adder_1_available <= `BSV_ASSIGNMENT_DELAY adder_1_available_D_IN;
	if (adder_1_cin_EN)
	  adder_1_cin <= `BSV_ASSIGNMENT_DELAY adder_1_cin_D_IN;
	if (adder_1_in1_EN)
	  adder_1_in1 <= `BSV_ASSIGNMENT_DELAY adder_1_in1_D_IN;
	if (adder_1_in2_EN)
	  adder_1_in2 <= `BSV_ASSIGNMENT_DELAY adder_1_in2_D_IN;
	if (adder_1_result_EN)
	  adder_1_result <= `BSV_ASSIGNMENT_DELAY adder_1_result_D_IN;
	if (b_EN) b <= `BSV_ASSIGNMENT_DELAY b_D_IN;
	if (cin_EN) cin <= `BSV_ASSIGNMENT_DELAY cin_D_IN;
	if (count_EN) count <= `BSV_ASSIGNMENT_DELAY count_D_IN;
	if (cout_EN) cout <= `BSV_ASSIGNMENT_DELAY cout_D_IN;
	if (overflow_flag_EN)
	  overflow_flag <= `BSV_ASSIGNMENT_DELAY overflow_flag_D_IN;
	if (rng_a_r_EN) rng_a_r <= `BSV_ASSIGNMENT_DELAY rng_a_r_D_IN;
	if (rng_b_r_EN) rng_b_r <= `BSV_ASSIGNMENT_DELAY rng_b_r_D_IN;
	if (rng_cin_r_EN) rng_cin_r <= `BSV_ASSIGNMENT_DELAY rng_cin_r_D_IN;
	if (state_EN) state <= `BSV_ASSIGNMENT_DELAY state_D_IN;
	if (sum_EN) sum <= `BSV_ASSIGNMENT_DELAY sum_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    a = 32'hAAAAAAAA;
    adder_1_available = 1'h0;
    adder_1_cin = 1'h0;
    adder_1_in1 = 32'hAAAAAAAA;
    adder_1_in2 = 32'hAAAAAAAA;
    adder_1_result = 33'h0AAAAAAAA;
    b = 32'hAAAAAAAA;
    cin = 1'h0;
    count = 8'hAA;
    cout = 1'h0;
    overflow_flag = 1'h0;
    rng_a_r = 32'hAAAAAAAA;
    rng_b_r = 32'hAAAAAAAA;
    rng_cin_r = 8'hAA;
    state = 2'h2;
    sum = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_results && count_17_ULT_30___d332 &&
	  _0_CONCAT_a_33_34_PLUS_0_CONCAT_b_35_36_37_PLUS_ETC___d344)
	$display("Test Passed");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_results && count_17_ULT_30___d332 &&
	  !_0_CONCAT_a_33_34_PLUS_0_CONCAT_b_35_36_37_PLUS_ETC___d344)
	$display("Test Failed: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_results && count_17_ULT_30___d332 &&
	  !_0_CONCAT_a_33_34_PLUS_0_CONCAT_b_35_36_37_PLUS_ETC___d344)
	$display("  %32b\n+ %32b\n+\t\t\t\t %0b\n= \n  %32b", a, b, cin, sum);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_results && count_17_ULT_30___d332 &&
	  !_0_CONCAT_a_33_34_PLUS_0_CONCAT_b_35_36_37_PLUS_ETC___d344)
	$display("Cout = %0b", cout);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_results && count_17_ULT_30___d332 &&
	  !_0_CONCAT_a_33_34_PLUS_0_CONCAT_b_35_36_37_PLUS_ETC___d344)
	$display(" %33b", expected_sum__h11845);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_results && count_17_ULT_30___d332 &&
	  !_0_CONCAT_a_33_34_PLUS_0_CONCAT_b_35_36_37_PLUS_ETC___d344)
	$display("Overflow Flag = %0h\n", overflow_flag);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_results && count_17_ULT_30___d332 &&
	  overflow_flag)
	$display("Overflow occured");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_results && !count_17_ULT_30___d332)
	$finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mkTestbench

