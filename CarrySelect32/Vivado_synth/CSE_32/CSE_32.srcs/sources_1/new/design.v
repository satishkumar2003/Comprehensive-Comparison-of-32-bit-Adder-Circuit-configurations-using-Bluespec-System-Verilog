`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 06/06/2024 04:29:20 PM
// Design Name: 
// Module Name: design
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


//
// Generated by Bluespec Compiler, version 2024.01-13-ga8fe68a6 (build a8fe68a6)
//
// On Thu Jun  6 16:00:44 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_start                      O     1 const
// return_sum                     O    32 reg
// RDY_return_sum                 O     1 const
// return_carry                   O     1 reg
// RDY_return_carry               O     1 const
// overflow                       O     1
// RDY_overflow                   O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// start_in1                      I    32 reg
// start_in2                      I    32 reg
// start_cin                      I     1 reg
// EN_start                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCSE32(CLK,
	       RST_N,

	       start_in1,
	       start_in2,
	       start_cin,
	       EN_start,
	       RDY_start,

	       return_sum,
	       RDY_return_sum,

	       return_carry,
	       RDY_return_carry,

	       overflow,
	       RDY_overflow);
  input  CLK;
  input  RST_N;

  // action method start
  input  [31 : 0] start_in1;
  input  [31 : 0] start_in2;
  input  start_cin;
  input  EN_start;
  output RDY_start;

  // value method return_sum
  output [31 : 0] return_sum;
  output RDY_return_sum;

  // value method return_carry
  output return_carry;
  output RDY_return_carry;

  // value method overflow
  output overflow;
  output RDY_overflow;

  // signals for module outputs
  wire [31 : 0] return_sum;
  wire RDY_overflow,
       RDY_return_carry,
       RDY_return_sum,
       RDY_start,
       overflow,
       return_carry;

  // register available
  reg available;
  wire available_D_IN, available_EN;

  // register cin
  reg cin;
  wire cin_D_IN, cin_EN;

  // register in1
  reg [31 : 0] in1;
  wire [31 : 0] in1_D_IN;
  wire in1_EN;

  // register in2
  reg [31 : 0] in2;
  wire [31 : 0] in2_D_IN;
  wire in2_EN;

  // register result
  reg [32 : 0] result;
  wire [32 : 0] result_D_IN;
  wire result_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_call_compute,
       CAN_FIRE_start,
       WILL_FIRE_RL_call_compute,
       WILL_FIRE_start;

  // remaining internal signals
  wire [23 : 0] IF_IF_IF_cin_THEN_IF_in1_BITS_7_TO_0_XOR_in2_B_ETC___d266;
  wire [8 : 0] IF_in1_BITS_15_TO_8_0_AND_in2_BITS_15_TO_8_1_4_ETC___d97,
	       IF_in1_BITS_15_TO_8_0_XOR_in2_BITS_15_TO_8_1_2_ETC___d67,
	       IF_in1_BITS_23_TO_16_14_AND_in2_BITS_23_TO_16__ETC___d151,
	       IF_in1_BITS_23_TO_16_14_XOR_in2_BITS_23_TO_16__ETC___d121,
	       IF_in1_BITS_31_TO_24_68_AND_in2_BITS_31_TO_24__ETC___d205,
	       IF_in1_BITS_31_TO_24_68_XOR_in2_BITS_31_TO_24__ETC___d175,
	       IF_in1_BITS_7_TO_0_AND_in2_BITS_7_TO_0_0_BIT_0_ETC___d43,
	       IF_in1_BITS_7_TO_0_XOR_in2_BITS_7_TO_0_BIT_0_O_ETC___d13;
  wire [7 : 0] in1_BITS_15_TO_8_0_AND_in2_BITS_15_TO_8_1___d64,
	       in1_BITS_23_TO_16_14_AND_in2_BITS_23_TO_16_15___d118,
	       in1_BITS_31_TO_24_68_AND_in2_BITS_31_TO_24_69___d172,
	       in1_BITS_7_TO_0_AND_in2_BITS_7_TO_0___d10,
	       p__h10777,
	       p__h14946,
	       p__h2439,
	       p__h6608,
	       sum__h10781,
	       sum__h12867,
	       sum__h14950,
	       sum__h2443,
	       sum__h358,
	       sum__h4529,
	       sum__h6612,
	       sum__h8698;
  wire IF_IF_IF_cin_THEN_IF_in1_BITS_7_TO_0_XOR_in2_B_ETC___d167,
       IF_IF_cin_THEN_IF_in1_BITS_7_TO_0_XOR_in2_BITS_ETC___d113,
       IF_cin_THEN_IF_in1_BITS_7_TO_0_XOR_in2_BITS_7__ETC___d59,
       cout__h258,
       x__h10117,
       x__h10119,
       x__h10334,
       x__h10336,
       x__h10551,
       x__h10553,
       x__h1128,
       x__h1130,
       x__h11331,
       x__h11549,
       x__h11551,
       x__h11766,
       x__h11768,
       x__h11983,
       x__h11985,
       x__h12200,
       x__h12202,
       x__h12417,
       x__h12419,
       x__h12634,
       x__h12636,
       x__h13417,
       x__h1345,
       x__h1347,
       x__h13635,
       x__h13637,
       x__h13852,
       x__h13854,
       x__h14069,
       x__h14071,
       x__h14286,
       x__h14288,
       x__h14503,
       x__h14505,
       x__h14720,
       x__h14722,
       x__h15500,
       x__h1562,
       x__h1564,
       x__h15718,
       x__h15720,
       x__h15935,
       x__h15937,
       x__h16152,
       x__h16154,
       x__h16369,
       x__h16371,
       x__h16586,
       x__h16588,
       x__h16803,
       x__h16805,
       x__h17305,
       x__h17307,
       x__h1779,
       x__h1781,
       x__h1996,
       x__h1998,
       x__h2213,
       x__h2215,
       x__h2993,
       x__h3211,
       x__h3213,
       x__h3428,
       x__h3430,
       x__h3645,
       x__h3647,
       x__h3862,
       x__h3864,
       x__h4079,
       x__h4081,
       x__h4296,
       x__h4298,
       x__h5079,
       x__h5297,
       x__h5299,
       x__h5514,
       x__h5516,
       x__h5731,
       x__h5733,
       x__h5948,
       x__h5950,
       x__h6165,
       x__h6167,
       x__h6382,
       x__h6384,
       x__h7162,
       x__h7380,
       x__h7382,
       x__h7597,
       x__h7599,
       x__h7814,
       x__h7816,
       x__h8031,
       x__h8033,
       x__h8248,
       x__h8250,
       x__h8465,
       x__h8467,
       x__h910,
       x__h9248,
       x__h9466,
       x__h9468,
       x__h9683,
       x__h9685,
       x__h9900,
       x__h9902,
       y__h17306;

  // action method start
  assign RDY_start = 1'd1 ;
  assign CAN_FIRE_start = 1'd1 ;
  assign WILL_FIRE_start = EN_start ;

  // value method return_sum
  assign return_sum = result[31:0] ;
  assign RDY_return_sum = 1'd1 ;

  // value method return_carry
  assign return_carry = result[32] ;
  assign RDY_return_carry = 1'd1 ;

  // value method overflow
  assign overflow = x__h17305 & y__h17306 ;
  assign RDY_overflow = available ;

  // rule RL_call_compute
  assign CAN_FIRE_RL_call_compute = !available ;
  assign WILL_FIRE_RL_call_compute = CAN_FIRE_RL_call_compute ;

  // register available
  assign available_D_IN = !EN_start ;
  assign available_EN = EN_start || WILL_FIRE_RL_call_compute ;

  // register cin
  assign cin_D_IN = start_cin ;
  assign cin_EN = EN_start ;

  // register in1
  assign in1_D_IN = start_in1 ;
  assign in1_EN = EN_start ;

  // register in2
  assign in2_D_IN = start_in2 ;
  assign in2_EN = EN_start ;

  // register result
  assign result_D_IN =
	     { cout__h258,
	       IF_IF_IF_cin_THEN_IF_in1_BITS_7_TO_0_XOR_in2_B_ETC___d167 ?
		 sum__h12867 :
		 sum__h14950,
	       IF_IF_IF_cin_THEN_IF_in1_BITS_7_TO_0_XOR_in2_B_ETC___d266 } ;
  assign result_EN = CAN_FIRE_RL_call_compute ;

  // remaining internal signals
  assign IF_IF_IF_cin_THEN_IF_in1_BITS_7_TO_0_XOR_in2_B_ETC___d167 =
	     IF_IF_cin_THEN_IF_in1_BITS_7_TO_0_XOR_in2_BITS_ETC___d113 ?
	       x__h10551 |
	       in1_BITS_23_TO_16_14_AND_in2_BITS_23_TO_16_15___d118[7] :
	       x__h12634 |
	       in1_BITS_23_TO_16_14_AND_in2_BITS_23_TO_16_15___d118[7] ;
  assign IF_IF_IF_cin_THEN_IF_in1_BITS_7_TO_0_XOR_in2_B_ETC___d266 =
	     { IF_IF_cin_THEN_IF_in1_BITS_7_TO_0_XOR_in2_BITS_ETC___d113 ?
		 sum__h8698 :
		 sum__h10781,
	       IF_cin_THEN_IF_in1_BITS_7_TO_0_XOR_in2_BITS_7__ETC___d59 ?
		 sum__h4529 :
		 sum__h6612,
	       cin ? sum__h358 : sum__h2443 } ;
  assign IF_IF_cin_THEN_IF_in1_BITS_7_TO_0_XOR_in2_BITS_ETC___d113 =
	     IF_cin_THEN_IF_in1_BITS_7_TO_0_XOR_in2_BITS_7__ETC___d59 ?
	       x__h6382 | in1_BITS_15_TO_8_0_AND_in2_BITS_15_TO_8_1___d64[7] :
	       x__h8465 | in1_BITS_15_TO_8_0_AND_in2_BITS_15_TO_8_1___d64[7] ;
  assign IF_cin_THEN_IF_in1_BITS_7_TO_0_XOR_in2_BITS_7__ETC___d59 =
	     cin ?
	       x__h2213 | in1_BITS_7_TO_0_AND_in2_BITS_7_TO_0___d10[7] :
	       x__h4296 | in1_BITS_7_TO_0_AND_in2_BITS_7_TO_0___d10[7] ;
  assign IF_in1_BITS_15_TO_8_0_AND_in2_BITS_15_TO_8_1_4_ETC___d97 =
	     in1_BITS_15_TO_8_0_AND_in2_BITS_15_TO_8_1___d64[0] ?
	       9'd2 :
	       9'd0 ;
  assign IF_in1_BITS_15_TO_8_0_XOR_in2_BITS_15_TO_8_1_2_ETC___d67 =
	     (p__h6608[0] |
	      in1_BITS_15_TO_8_0_AND_in2_BITS_15_TO_8_1___d64[0]) ?
	       9'd3 :
	       9'd1 ;
  assign IF_in1_BITS_23_TO_16_14_AND_in2_BITS_23_TO_16__ETC___d151 =
	     in1_BITS_23_TO_16_14_AND_in2_BITS_23_TO_16_15___d118[0] ?
	       9'd2 :
	       9'd0 ;
  assign IF_in1_BITS_23_TO_16_14_XOR_in2_BITS_23_TO_16__ETC___d121 =
	     (p__h10777[0] |
	      in1_BITS_23_TO_16_14_AND_in2_BITS_23_TO_16_15___d118[0]) ?
	       9'd3 :
	       9'd1 ;
  assign IF_in1_BITS_31_TO_24_68_AND_in2_BITS_31_TO_24__ETC___d205 =
	     in1_BITS_31_TO_24_68_AND_in2_BITS_31_TO_24_69___d172[0] ?
	       9'd2 :
	       9'd0 ;
  assign IF_in1_BITS_31_TO_24_68_XOR_in2_BITS_31_TO_24__ETC___d175 =
	     (p__h14946[0] |
	      in1_BITS_31_TO_24_68_AND_in2_BITS_31_TO_24_69___d172[0]) ?
	       9'd3 :
	       9'd1 ;
  assign IF_in1_BITS_7_TO_0_AND_in2_BITS_7_TO_0_0_BIT_0_ETC___d43 =
	     in1_BITS_7_TO_0_AND_in2_BITS_7_TO_0___d10[0] ? 9'd2 : 9'd0 ;
  assign IF_in1_BITS_7_TO_0_XOR_in2_BITS_7_TO_0_BIT_0_O_ETC___d13 =
	     (p__h2439[0] | in1_BITS_7_TO_0_AND_in2_BITS_7_TO_0___d10[0]) ?
	       9'd3 :
	       9'd1 ;
  assign cout__h258 =
	     IF_IF_IF_cin_THEN_IF_in1_BITS_7_TO_0_XOR_in2_B_ETC___d167 ?
	       x__h14720 |
	       in1_BITS_31_TO_24_68_AND_in2_BITS_31_TO_24_69___d172[7] :
	       x__h16803 |
	       in1_BITS_31_TO_24_68_AND_in2_BITS_31_TO_24_69___d172[7] ;
  assign in1_BITS_15_TO_8_0_AND_in2_BITS_15_TO_8_1___d64 =
	     in1[15:8] & in2[15:8] ;
  assign in1_BITS_23_TO_16_14_AND_in2_BITS_23_TO_16_15___d118 =
	     in1[23:16] & in2[23:16] ;
  assign in1_BITS_31_TO_24_68_AND_in2_BITS_31_TO_24_69___d172 =
	     in1[31:24] & in2[31:24] ;
  assign in1_BITS_7_TO_0_AND_in2_BITS_7_TO_0___d10 = in1[7:0] & in2[7:0] ;
  assign p__h10777 = in1[23:16] ^ in2[23:16] ;
  assign p__h14946 = in1[31:24] ^ in2[31:24] ;
  assign p__h2439 = in1[7:0] ^ in2[7:0] ;
  assign p__h6608 = in1[15:8] ^ in2[15:8] ;
  assign sum__h10781 =
	     p__h10777 ^
	     { x__h12636,
	       x__h12419,
	       x__h12202,
	       x__h11985,
	       x__h11768,
	       x__h11551,
	       IF_in1_BITS_23_TO_16_14_AND_in2_BITS_23_TO_16__ETC___d151[1:0] } ;
  assign sum__h12867 =
	     p__h14946 ^
	     { x__h14722,
	       x__h14505,
	       x__h14288,
	       x__h14071,
	       x__h13854,
	       x__h13637,
	       IF_in1_BITS_31_TO_24_68_XOR_in2_BITS_31_TO_24__ETC___d175[1:0] } ;
  assign sum__h14950 =
	     p__h14946 ^
	     { x__h16805,
	       x__h16588,
	       x__h16371,
	       x__h16154,
	       x__h15937,
	       x__h15720,
	       IF_in1_BITS_31_TO_24_68_AND_in2_BITS_31_TO_24__ETC___d205[1:0] } ;
  assign sum__h2443 =
	     p__h2439 ^
	     { x__h4298,
	       x__h4081,
	       x__h3864,
	       x__h3647,
	       x__h3430,
	       x__h3213,
	       IF_in1_BITS_7_TO_0_AND_in2_BITS_7_TO_0_0_BIT_0_ETC___d43[1:0] } ;
  assign sum__h358 =
	     p__h2439 ^
	     { x__h2215,
	       x__h1998,
	       x__h1781,
	       x__h1564,
	       x__h1347,
	       x__h1130,
	       IF_in1_BITS_7_TO_0_XOR_in2_BITS_7_TO_0_BIT_0_O_ETC___d13[1:0] } ;
  assign sum__h4529 =
	     p__h6608 ^
	     { x__h6384,
	       x__h6167,
	       x__h5950,
	       x__h5733,
	       x__h5516,
	       x__h5299,
	       IF_in1_BITS_15_TO_8_0_XOR_in2_BITS_15_TO_8_1_2_ETC___d67[1:0] } ;
  assign sum__h6612 =
	     p__h6608 ^
	     { x__h8467,
	       x__h8250,
	       x__h8033,
	       x__h7816,
	       x__h7599,
	       x__h7382,
	       IF_in1_BITS_15_TO_8_0_AND_in2_BITS_15_TO_8_1_4_ETC___d97[1:0] } ;
  assign sum__h8698 =
	     p__h10777 ^
	     { x__h10553,
	       x__h10336,
	       x__h10119,
	       x__h9902,
	       x__h9685,
	       x__h9468,
	       IF_in1_BITS_23_TO_16_14_XOR_in2_BITS_23_TO_16__ETC___d121[1:0] } ;
  assign x__h10117 = x__h10119 & p__h10777[5] ;
  assign x__h10119 =
	     x__h9900 |
	     in1_BITS_23_TO_16_14_AND_in2_BITS_23_TO_16_15___d118[4] ;
  assign x__h10334 = x__h10336 & p__h10777[6] ;
  assign x__h10336 =
	     x__h10117 |
	     in1_BITS_23_TO_16_14_AND_in2_BITS_23_TO_16_15___d118[5] ;
  assign x__h10551 = x__h10553 & p__h10777[7] ;
  assign x__h10553 =
	     x__h10334 |
	     in1_BITS_23_TO_16_14_AND_in2_BITS_23_TO_16_15___d118[6] ;
  assign x__h1128 = x__h1130 & p__h2439[2] ;
  assign x__h1130 = x__h910 | in1_BITS_7_TO_0_AND_in2_BITS_7_TO_0___d10[1] ;
  assign x__h11331 =
	     IF_in1_BITS_23_TO_16_14_AND_in2_BITS_23_TO_16__ETC___d151[1] &
	     p__h10777[1] ;
  assign x__h11549 = x__h11551 & p__h10777[2] ;
  assign x__h11551 =
	     x__h11331 |
	     in1_BITS_23_TO_16_14_AND_in2_BITS_23_TO_16_15___d118[1] ;
  assign x__h11766 = x__h11768 & p__h10777[3] ;
  assign x__h11768 =
	     x__h11549 |
	     in1_BITS_23_TO_16_14_AND_in2_BITS_23_TO_16_15___d118[2] ;
  assign x__h11983 = x__h11985 & p__h10777[4] ;
  assign x__h11985 =
	     x__h11766 |
	     in1_BITS_23_TO_16_14_AND_in2_BITS_23_TO_16_15___d118[3] ;
  assign x__h12200 = x__h12202 & p__h10777[5] ;
  assign x__h12202 =
	     x__h11983 |
	     in1_BITS_23_TO_16_14_AND_in2_BITS_23_TO_16_15___d118[4] ;
  assign x__h12417 = x__h12419 & p__h10777[6] ;
  assign x__h12419 =
	     x__h12200 |
	     in1_BITS_23_TO_16_14_AND_in2_BITS_23_TO_16_15___d118[5] ;
  assign x__h12634 = x__h12636 & p__h10777[7] ;
  assign x__h12636 =
	     x__h12417 |
	     in1_BITS_23_TO_16_14_AND_in2_BITS_23_TO_16_15___d118[6] ;
  assign x__h13417 =
	     IF_in1_BITS_31_TO_24_68_XOR_in2_BITS_31_TO_24__ETC___d175[1] &
	     p__h14946[1] ;
  assign x__h1345 = x__h1347 & p__h2439[3] ;
  assign x__h1347 = x__h1128 | in1_BITS_7_TO_0_AND_in2_BITS_7_TO_0___d10[2] ;
  assign x__h13635 = x__h13637 & p__h14946[2] ;
  assign x__h13637 =
	     x__h13417 |
	     in1_BITS_31_TO_24_68_AND_in2_BITS_31_TO_24_69___d172[1] ;
  assign x__h13852 = x__h13854 & p__h14946[3] ;
  assign x__h13854 =
	     x__h13635 |
	     in1_BITS_31_TO_24_68_AND_in2_BITS_31_TO_24_69___d172[2] ;
  assign x__h14069 = x__h14071 & p__h14946[4] ;
  assign x__h14071 =
	     x__h13852 |
	     in1_BITS_31_TO_24_68_AND_in2_BITS_31_TO_24_69___d172[3] ;
  assign x__h14286 = x__h14288 & p__h14946[5] ;
  assign x__h14288 =
	     x__h14069 |
	     in1_BITS_31_TO_24_68_AND_in2_BITS_31_TO_24_69___d172[4] ;
  assign x__h14503 = x__h14505 & p__h14946[6] ;
  assign x__h14505 =
	     x__h14286 |
	     in1_BITS_31_TO_24_68_AND_in2_BITS_31_TO_24_69___d172[5] ;
  assign x__h14720 = x__h14722 & p__h14946[7] ;
  assign x__h14722 =
	     x__h14503 |
	     in1_BITS_31_TO_24_68_AND_in2_BITS_31_TO_24_69___d172[6] ;
  assign x__h15500 =
	     IF_in1_BITS_31_TO_24_68_AND_in2_BITS_31_TO_24__ETC___d205[1] &
	     p__h14946[1] ;
  assign x__h1562 = x__h1564 & p__h2439[4] ;
  assign x__h1564 = x__h1345 | in1_BITS_7_TO_0_AND_in2_BITS_7_TO_0___d10[3] ;
  assign x__h15718 = x__h15720 & p__h14946[2] ;
  assign x__h15720 =
	     x__h15500 |
	     in1_BITS_31_TO_24_68_AND_in2_BITS_31_TO_24_69___d172[1] ;
  assign x__h15935 = x__h15937 & p__h14946[3] ;
  assign x__h15937 =
	     x__h15718 |
	     in1_BITS_31_TO_24_68_AND_in2_BITS_31_TO_24_69___d172[2] ;
  assign x__h16152 = x__h16154 & p__h14946[4] ;
  assign x__h16154 =
	     x__h15935 |
	     in1_BITS_31_TO_24_68_AND_in2_BITS_31_TO_24_69___d172[3] ;
  assign x__h16369 = x__h16371 & p__h14946[5] ;
  assign x__h16371 =
	     x__h16152 |
	     in1_BITS_31_TO_24_68_AND_in2_BITS_31_TO_24_69___d172[4] ;
  assign x__h16586 = x__h16588 & p__h14946[6] ;
  assign x__h16588 =
	     x__h16369 |
	     in1_BITS_31_TO_24_68_AND_in2_BITS_31_TO_24_69___d172[5] ;
  assign x__h16803 = x__h16805 & p__h14946[7] ;
  assign x__h16805 =
	     x__h16586 |
	     in1_BITS_31_TO_24_68_AND_in2_BITS_31_TO_24_69___d172[6] ;
  assign x__h17305 = x__h17307 ^ in2[31] ;
  assign x__h17307 = ~in1[31] ;
  assign x__h1779 = x__h1781 & p__h2439[5] ;
  assign x__h1781 = x__h1562 | in1_BITS_7_TO_0_AND_in2_BITS_7_TO_0___d10[4] ;
  assign x__h1996 = x__h1998 & p__h2439[6] ;
  assign x__h1998 = x__h1779 | in1_BITS_7_TO_0_AND_in2_BITS_7_TO_0___d10[5] ;
  assign x__h2213 = x__h2215 & p__h2439[7] ;
  assign x__h2215 = x__h1996 | in1_BITS_7_TO_0_AND_in2_BITS_7_TO_0___d10[6] ;
  assign x__h2993 =
	     IF_in1_BITS_7_TO_0_AND_in2_BITS_7_TO_0_0_BIT_0_ETC___d43[1] &
	     p__h2439[1] ;
  assign x__h3211 = x__h3213 & p__h2439[2] ;
  assign x__h3213 = x__h2993 | in1_BITS_7_TO_0_AND_in2_BITS_7_TO_0___d10[1] ;
  assign x__h3428 = x__h3430 & p__h2439[3] ;
  assign x__h3430 = x__h3211 | in1_BITS_7_TO_0_AND_in2_BITS_7_TO_0___d10[2] ;
  assign x__h3645 = x__h3647 & p__h2439[4] ;
  assign x__h3647 = x__h3428 | in1_BITS_7_TO_0_AND_in2_BITS_7_TO_0___d10[3] ;
  assign x__h3862 = x__h3864 & p__h2439[5] ;
  assign x__h3864 = x__h3645 | in1_BITS_7_TO_0_AND_in2_BITS_7_TO_0___d10[4] ;
  assign x__h4079 = x__h4081 & p__h2439[6] ;
  assign x__h4081 = x__h3862 | in1_BITS_7_TO_0_AND_in2_BITS_7_TO_0___d10[5] ;
  assign x__h4296 = x__h4298 & p__h2439[7] ;
  assign x__h4298 = x__h4079 | in1_BITS_7_TO_0_AND_in2_BITS_7_TO_0___d10[6] ;
  assign x__h5079 =
	     IF_in1_BITS_15_TO_8_0_XOR_in2_BITS_15_TO_8_1_2_ETC___d67[1] &
	     p__h6608[1] ;
  assign x__h5297 = x__h5299 & p__h6608[2] ;
  assign x__h5299 =
	     x__h5079 | in1_BITS_15_TO_8_0_AND_in2_BITS_15_TO_8_1___d64[1] ;
  assign x__h5514 = x__h5516 & p__h6608[3] ;
  assign x__h5516 =
	     x__h5297 | in1_BITS_15_TO_8_0_AND_in2_BITS_15_TO_8_1___d64[2] ;
  assign x__h5731 = x__h5733 & p__h6608[4] ;
  assign x__h5733 =
	     x__h5514 | in1_BITS_15_TO_8_0_AND_in2_BITS_15_TO_8_1___d64[3] ;
  assign x__h5948 = x__h5950 & p__h6608[5] ;
  assign x__h5950 =
	     x__h5731 | in1_BITS_15_TO_8_0_AND_in2_BITS_15_TO_8_1___d64[4] ;
  assign x__h6165 = x__h6167 & p__h6608[6] ;
  assign x__h6167 =
	     x__h5948 | in1_BITS_15_TO_8_0_AND_in2_BITS_15_TO_8_1___d64[5] ;
  assign x__h6382 = x__h6384 & p__h6608[7] ;
  assign x__h6384 =
	     x__h6165 | in1_BITS_15_TO_8_0_AND_in2_BITS_15_TO_8_1___d64[6] ;
  assign x__h7162 =
	     IF_in1_BITS_15_TO_8_0_AND_in2_BITS_15_TO_8_1_4_ETC___d97[1] &
	     p__h6608[1] ;
  assign x__h7380 = x__h7382 & p__h6608[2] ;
  assign x__h7382 =
	     x__h7162 | in1_BITS_15_TO_8_0_AND_in2_BITS_15_TO_8_1___d64[1] ;
  assign x__h7597 = x__h7599 & p__h6608[3] ;
  assign x__h7599 =
	     x__h7380 | in1_BITS_15_TO_8_0_AND_in2_BITS_15_TO_8_1___d64[2] ;
  assign x__h7814 = x__h7816 & p__h6608[4] ;
  assign x__h7816 =
	     x__h7597 | in1_BITS_15_TO_8_0_AND_in2_BITS_15_TO_8_1___d64[3] ;
  assign x__h8031 = x__h8033 & p__h6608[5] ;
  assign x__h8033 =
	     x__h7814 | in1_BITS_15_TO_8_0_AND_in2_BITS_15_TO_8_1___d64[4] ;
  assign x__h8248 = x__h8250 & p__h6608[6] ;
  assign x__h8250 =
	     x__h8031 | in1_BITS_15_TO_8_0_AND_in2_BITS_15_TO_8_1___d64[5] ;
  assign x__h8465 = x__h8467 & p__h6608[7] ;
  assign x__h8467 =
	     x__h8248 | in1_BITS_15_TO_8_0_AND_in2_BITS_15_TO_8_1___d64[6] ;
  assign x__h910 =
	     IF_in1_BITS_7_TO_0_XOR_in2_BITS_7_TO_0_BIT_0_O_ETC___d13[1] &
	     p__h2439[1] ;
  assign x__h9248 =
	     IF_in1_BITS_23_TO_16_14_XOR_in2_BITS_23_TO_16__ETC___d121[1] &
	     p__h10777[1] ;
  assign x__h9466 = x__h9468 & p__h10777[2] ;
  assign x__h9468 =
	     x__h9248 |
	     in1_BITS_23_TO_16_14_AND_in2_BITS_23_TO_16_15___d118[1] ;
  assign x__h9683 = x__h9685 & p__h10777[3] ;
  assign x__h9685 =
	     x__h9466 |
	     in1_BITS_23_TO_16_14_AND_in2_BITS_23_TO_16_15___d118[2] ;
  assign x__h9900 = x__h9902 & p__h10777[4] ;
  assign x__h9902 =
	     x__h9683 |
	     in1_BITS_23_TO_16_14_AND_in2_BITS_23_TO_16_15___d118[3] ;
  assign y__h17306 = in2[31] ^ result[31] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        available <= `BSV_ASSIGNMENT_DELAY 1'd1;
	cin <= `BSV_ASSIGNMENT_DELAY 1'd0;
	in1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	in2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	result <= `BSV_ASSIGNMENT_DELAY 33'd0;
      end
    else
      begin
        if (available_EN) available <= `BSV_ASSIGNMENT_DELAY available_D_IN;
	if (cin_EN) cin <= `BSV_ASSIGNMENT_DELAY cin_D_IN;
	if (in1_EN) in1 <= `BSV_ASSIGNMENT_DELAY in1_D_IN;
	if (in2_EN) in2 <= `BSV_ASSIGNMENT_DELAY in2_D_IN;
	if (result_EN) result <= `BSV_ASSIGNMENT_DELAY result_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    available = 1'h0;
    cin = 1'h0;
    in1 = 32'hAAAAAAAA;
    in2 = 32'hAAAAAAAA;
    result = 33'h0AAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkCSE32
