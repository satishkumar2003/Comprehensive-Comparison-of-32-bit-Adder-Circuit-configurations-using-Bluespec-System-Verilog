//
// Generated by Bluespec Compiler, version 2024.01-13-ga8fe68a6 (build a8fe68a6)
//
// On Wed Jun  5 14:52:13 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTestbench(CLK,
		   RST_N);
  input  CLK;
  input  RST_N;

  // register state
  reg [1 : 0] state;
  wire [1 : 0] state_D_IN;
  wire state_EN;

  // ports of submodule adder1
  wire adder1_EN_start,
       adder1_RDY_return_cout,
       adder1_RDY_return_sum,
       adder1_return_cout,
       adder1_return_sum,
       adder1_start_cin,
       adder1_start_in1,
       adder1_start_in2;

  // rule scheduling signals
  wire CAN_FIRE_RL_get_cout,
       CAN_FIRE_RL_get_sum,
       CAN_FIRE_RL_initialize,
       WILL_FIRE_RL_get_cout,
       WILL_FIRE_RL_get_sum,
       WILL_FIRE_RL_initialize;

  // submodule adder1
  mkFA adder1(.CLK(CLK),
	      .RST_N(RST_N),
	      .start_cin(adder1_start_cin),
	      .start_in1(adder1_start_in1),
	      .start_in2(adder1_start_in2),
	      .EN_start(adder1_EN_start),
	      .RDY_start(),
	      .return_sum(adder1_return_sum),
	      .RDY_return_sum(adder1_RDY_return_sum),
	      .return_cout(adder1_return_cout),
	      .RDY_return_cout(adder1_RDY_return_cout));

  // rule RL_initialize
  assign CAN_FIRE_RL_initialize = state == 2'd0 ;
  assign WILL_FIRE_RL_initialize = CAN_FIRE_RL_initialize ;

  // rule RL_get_sum
  assign CAN_FIRE_RL_get_sum = adder1_RDY_return_sum && state == 2'd1 ;
  assign WILL_FIRE_RL_get_sum = CAN_FIRE_RL_get_sum ;

  // rule RL_get_cout
  assign CAN_FIRE_RL_get_cout = adder1_RDY_return_cout && state == 2'd2 ;
  assign WILL_FIRE_RL_get_cout = CAN_FIRE_RL_get_cout ;

  // register state
  assign state_D_IN = WILL_FIRE_RL_initialize ? 2'd1 : 2'd2 ;
  assign state_EN = WILL_FIRE_RL_initialize || WILL_FIRE_RL_get_sum ;

  // submodule adder1
  assign adder1_start_cin = 1'd1 ;
  assign adder1_start_in1 = 1'd1 ;
  assign adder1_start_in2 = 1'd1 ;
  assign adder1_EN_start = CAN_FIRE_RL_initialize ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        state <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (state_EN) state <= `BSV_ASSIGNMENT_DELAY state_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    state = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_get_sum) $display("Sum = %0h", adder1_return_sum);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_get_cout) $display("Cout = %0h", adder1_return_cout);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_get_cout) $finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mkTestbench

